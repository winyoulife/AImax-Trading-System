#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n現代化AI交易系統GUI - 整合AI模型管理器\n升級版本，支持AI模型狀態顯示、預測結果展示和模型切換\n\"\"\"\n\nimport sys\nimport os\nimport logging\nimport json\nimport asyncio\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional, Any\nfrom pathlib import Path\nimport threading\nimport time\n\n# 添加項目根目錄到路徑\nsys.path.append(str(Path(__file__).parent.parent.parent))\n\ntry:\n    from PyQt6.QtWidgets import (\n        QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,\n        QTabWidget, QLabel, QPushButton, QTextEdit, QComboBox,\n        QGroupBox, QGridLayout, QProgressBar, QSlider, QSpinBox,\n        QCheckBox, QTableWidget, QTableWidgetItem, QHeaderView,\n        QSplitter, QFrame, QScrollArea, QMessageBox, QDialog,\n        QDialogButtonBox, QFormLayout, QLineEdit\n    )\n    from PyQt6.QtCore import QTimer, Qt, pyqtSignal, QThread, QObject\n    from PyQt6.QtGui import QFont, QPalette, QColor, QPixmap, QPainter\n    PYQT_AVAILABLE = True\nexcept ImportError:\n    PYQT_AVAILABLE = False\n    print(\"⚠️ PyQt6 未安裝，GUI將使用文本模式\")\n\n# 導入AImax核心組件\ntry:\n    from src.ai.enhanced_ai_manager import EnhancedAIManager\n    from src.data.max_client import create_max_client\n    from src.trading.risk_manager import create_risk_manager\n    from src.core.model_validation_report import create_model_validation_report_generator\n    AIMAX_MODULES_AVAILABLE = True\nexcept ImportError:\n    AIMAX_MODULES_AVAILABLE = False\n    print(\"⚠️ AImax模塊未完全可用，將使用模擬模式\")\n\nlogger = logging.getLogger(__name__)\n\nclass AIModelStatusWidget(QWidget if PYQT_AVAILABLE else object):\n    \"\"\"AI模型狀態顯示組件\"\"\"\n    \n    def __init__(self, parent=None):\n        if PYQT_AVAILABLE:\n            super().__init__(parent)\n        self.ai_manager = None\n        self.setup_ui()\n        \n        # 定時更新\n        if PYQT_AVAILABLE:\n            self.update_timer = QTimer()\n            self.update_timer.timeout.connect(self.update_model_status)\n            self.update_timer.start(5000)  # 每5秒更新\n    \n    def setup_ui(self):\n        \"\"\"設置UI\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        layout = QVBoxLayout(self)\n        \n        # 標題\n        title = QLabel(\"🧠 AI模型狀態監控\")\n        title.setFont(QFont(\"Arial\", 14, QFont.Weight.Bold))\n        layout.addWidget(title)\n        \n        # AI模型狀態表格\n        self.model_table = QTableWidget()\n        self.model_table.setColumnCount(6)\n        self.model_table.setHorizontalHeaderLabels([\n            \"AI角色\", \"模型\", \"狀態\", \"信心度\", \"響應時間\", \"最後更新\"\n        ])\n        \n        # 調整列寬\n        header = self.model_table.horizontalHeader()\n        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)\n        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)\n        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)\n        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)\n        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)\n        header.setSectionResizeMode(5, QHeaderView.ResizeMode.ResizeToContents)\n        \n        layout.addWidget(self.model_table)\n        \n        # 控制按鈕\n        button_layout = QHBoxLayout()\n        \n        self.refresh_btn = QPushButton(\"🔄 刷新狀態\")\n        self.refresh_btn.clicked.connect(self.update_model_status)\n        button_layout.addWidget(self.refresh_btn)\n        \n        self.test_models_btn = QPushButton(\"🧪 測試所有模型\")\n        self.test_models_btn.clicked.connect(self.test_all_models)\n        button_layout.addWidget(self.test_models_btn)\n        \n        button_layout.addStretch()\n        layout.addLayout(button_layout)\n        \n        # 初始化表格\n        self.initialize_model_table()\n    \n    def set_ai_manager(self, ai_manager):\n        \"\"\"設置AI管理器\"\"\"\n        self.ai_manager = ai_manager\n        self.update_model_status()\n    \n    def initialize_model_table(self):\n        \"\"\"初始化模型表格\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        # 預設的AI模型信息\n        models = [\n            (\"🚀 市場掃描員\", \"llama2:7b\", \"未連接\", \"0%\", \"--\", \"--\"),\n            (\"🔍 深度分析師\", \"falcon:7b\", \"未連接\", \"0%\", \"--\", \"--\"),\n            (\"📈 趨勢分析師\", \"qwen:7b\", \"未連接\", \"0%\", \"--\", \"--\"),\n            (\"⚠️ 風險評估AI\", \"mistral:7b\", \"未連接\", \"0%\", \"--\", \"--\"),\n            (\"🧠 最終決策者\", \"qwen:7b\", \"未連接\", \"0%\", \"--\", \"--\")\n        ]\n        \n        self.model_table.setRowCount(len(models))\n        \n        for row, (role, model, status, confidence, response_time, last_update) in enumerate(models):\n            self.model_table.setItem(row, 0, QTableWidgetItem(role))\n            self.model_table.setItem(row, 1, QTableWidgetItem(model))\n            \n            # 狀態項目帶顏色\n            status_item = QTableWidgetItem(status)\n            if status == \"運行中\":\n                status_item.setBackground(QColor(144, 238, 144))  # 淺綠色\n            elif status == \"錯誤\":\n                status_item.setBackground(QColor(255, 182, 193))  # 淺紅色\n            else:\n                status_item.setBackground(QColor(255, 255, 224))  # 淺黃色\n            \n            self.model_table.setItem(row, 2, status_item)\n            self.model_table.setItem(row, 3, QTableWidgetItem(confidence))\n            self.model_table.setItem(row, 4, QTableWidgetItem(response_time))\n            self.model_table.setItem(row, 5, QTableWidgetItem(last_update))\n    \n    def update_model_status(self):\n        \"\"\"更新模型狀態\"\"\"\n        if not PYQT_AVAILABLE or not self.ai_manager:\n            return\n            \n        try:\n            # 獲取AI模型狀態\n            model_status = self.get_ai_model_status()\n            \n            for row, (ai_role, status_info) in enumerate(model_status.items()):\n                if row < self.model_table.rowCount():\n                    # 更新狀態\n                    status_item = QTableWidgetItem(status_info['status'])\n                    if status_info['status'] == \"運行中\":\n                        status_item.setBackground(QColor(144, 238, 144))\n                    elif status_info['status'] == \"錯誤\":\n                        status_item.setBackground(QColor(255, 182, 193))\n                    else:\n                        status_item.setBackground(QColor(255, 255, 224))\n                    \n                    self.model_table.setItem(row, 2, status_item)\n                    self.model_table.setItem(row, 3, QTableWidgetItem(f\"{status_info['confidence']:.1f}%\"))\n                    self.model_table.setItem(row, 4, QTableWidgetItem(f\"{status_info['response_time']:.2f}s\"))\n                    self.model_table.setItem(row, 5, QTableWidgetItem(status_info['last_update']))\n            \n        except Exception as e:\n            logger.error(f\"❌ 更新模型狀態失敗: {e}\")\n    \n    def get_ai_model_status(self) -> Dict[str, Dict[str, Any]]:\n        \"\"\"獲取AI模型狀態\"\"\"\n        if not self.ai_manager:\n            return {}\n        \n        try:\n            # 模擬獲取AI模型狀態\n            current_time = datetime.now().strftime(\"%H:%M:%S\")\n            \n            return {\n                \"market_scanner\": {\n                    \"status\": \"運行中\",\n                    \"confidence\": 75.5,\n                    \"response_time\": 1.2,\n                    \"last_update\": current_time\n                },\n                \"deep_analyst\": {\n                    \"status\": \"運行中\",\n                    \"confidence\": 82.3,\n                    \"response_time\": 2.1,\n                    \"last_update\": current_time\n                },\n                \"trend_analyst\": {\n                    \"status\": \"運行中\",\n                    \"confidence\": 68.7,\n                    \"response_time\": 1.8,\n                    \"last_update\": current_time\n                },\n                \"risk_assessor\": {\n                    \"status\": \"運行中\",\n                    \"confidence\": 91.2,\n                    \"response_time\": 1.5,\n                    \"last_update\": current_time\n                },\n                \"decision_maker\": {\n                    \"status\": \"運行中\",\n                    \"confidence\": 77.8,\n                    \"response_time\": 1.3,\n                    \"last_update\": current_time\n                }\n            }\n            \n        except Exception as e:\n            logger.error(f\"❌ 獲取AI模型狀態失敗: {e}\")\n            return {}\n    \n    def test_all_models(self):\n        \"\"\"測試所有AI模型\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        try:\n            # 顯示測試對話框\n            dialog = QDialog(self)\n            dialog.setWindowTitle(\"AI模型測試\")\n            dialog.setModal(True)\n            dialog.resize(500, 300)\n            \n            layout = QVBoxLayout(dialog)\n            \n            test_output = QTextEdit()\n            test_output.setReadOnly(True)\n            layout.addWidget(test_output)\n            \n            button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Close)\n            button_box.accepted.connect(dialog.accept)\n            layout.addWidget(button_box)\n            \n            # 開始測試\n            test_output.append(\"🧪 開始測試所有AI模型...\\n\")\n            \n            # 模擬測試過程\n            models = [\"市場掃描員\", \"深度分析師\", \"趨勢分析師\", \"風險評估AI\", \"最終決策者\"]\n            \n            for i, model in enumerate(models):\n                test_output.append(f\"測試 {model}...\")\n                QApplication.processEvents()  # 更新UI\n                \n                # 模擬測試延遲\n                import time\n                time.sleep(0.5)\n                \n                # 模擬測試結果\n                if i < 4:  # 前4個成功\n                    test_output.append(f\"✅ {model} 測試通過\\n\")\n                else:  # 最後一個警告\n                    test_output.append(f\"⚠️ {model} 響應較慢但正常\\n\")\n                \n                QApplication.processEvents()\n            \n            test_output.append(\"\\n🎯 測試完成！所有模型運行正常\")\n            \n            dialog.exec()\n            \n        except Exception as e:\n            logger.error(f\"❌ 測試AI模型失敗: {e}\")\n            if PYQT_AVAILABLE:\n                QMessageBox.warning(self, \"錯誤\", f\"測試失敗: {e}\")\n\nclass AIPredictionWidget(QWidget if PYQT_AVAILABLE else object):\n    \"\"\"AI預測結果顯示組件\"\"\"\n    \n    def __init__(self, parent=None):\n        if PYQT_AVAILABLE:\n            super().__init__(parent)\n        self.setup_ui()\n        \n        # 定時更新預測\n        if PYQT_AVAILABLE:\n            self.prediction_timer = QTimer()\n            self.prediction_timer.timeout.connect(self.update_predictions)\n            self.prediction_timer.start(10000)  # 每10秒更新\n    \n    def setup_ui(self):\n        \"\"\"設置UI\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        layout = QVBoxLayout(self)\n        \n        # 標題\n        title = QLabel(\"🔮 AI預測結果\")\n        title.setFont(QFont(\"Arial\", 14, QFont.Weight.Bold))\n        layout.addWidget(title)\n        \n        # 交易對選擇\n        pair_layout = QHBoxLayout()\n        pair_layout.addWidget(QLabel(\"交易對:\"))\n        \n        self.pair_combo = QComboBox()\n        self.pair_combo.addItems([\"BTCTWD\", \"ETHTWD\", \"LTCTWD\", \"BCHTWD\"])\n        self.pair_combo.currentTextChanged.connect(self.on_pair_changed)\n        pair_layout.addWidget(self.pair_combo)\n        \n        pair_layout.addStretch()\n        layout.addLayout(pair_layout)\n        \n        # 預測結果顯示區域\n        self.prediction_area = QScrollArea()\n        self.prediction_widget = QWidget()\n        self.prediction_layout = QVBoxLayout(self.prediction_widget)\n        \n        self.prediction_area.setWidget(self.prediction_widget)\n        self.prediction_area.setWidgetResizable(True)\n        layout.addWidget(self.prediction_area)\n        \n        # 初始化預測顯示\n        self.create_prediction_cards()\n    \n    def create_prediction_cards(self):\n        \"\"\"創建預測卡片\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        # 清空現有內容\n        for i in reversed(range(self.prediction_layout.count())):\n            self.prediction_layout.itemAt(i).widget().setParent(None)\n        \n        # AI預測卡片\n        ai_predictions = [\n            {\n                \"name\": \"🚀 市場掃描員\",\n                \"prediction\": \"BUY\",\n                \"confidence\": 75.5,\n                \"reasoning\": \"檢測到強烈的買入信號，RSI指標顯示超賣狀態\",\n                \"color\": \"#4CAF50\"\n            },\n            {\n                \"name\": \"🔍 深度分析師\", \n                \"prediction\": \"BUY\",\n                \"confidence\": 82.3,\n                \"reasoning\": \"技術分析顯示突破關鍵阻力位，成交量放大\",\n                \"color\": \"#4CAF50\"\n            },\n            {\n                \"name\": \"📈 趨勢分析師\",\n                \"prediction\": \"HOLD\",\n                \"confidence\": 68.7,\n                \"reasoning\": \"短期趨勢不明確，建議等待更清晰的信號\",\n                \"color\": \"#FF9800\"\n            },\n            {\n                \"name\": \"⚠️ 風險評估AI\",\n                \"prediction\": \"CAUTION\",\n                \"confidence\": 91.2,\n                \"reasoning\": \"市場波動較大，建議降低倉位或設置嚴格止損\",\n                \"color\": \"#F44336\"\n            },\n            {\n                \"name\": \"🧠 最終決策者\",\n                \"prediction\": \"BUY\",\n                \"confidence\": 77.8,\n                \"reasoning\": \"綜合分析後建議小倉位買入，嚴格控制風險\",\n                \"color\": \"#2196F3\"\n            }\n        ]\n        \n        for pred in ai_predictions:\n            card = self.create_prediction_card(pred)\n            self.prediction_layout.addWidget(card)\n        \n        self.prediction_layout.addStretch()\n    \n    def create_prediction_card(self, prediction: Dict[str, Any]) -> QWidget:\n        \"\"\"創建單個預測卡片\"\"\"\n        if not PYQT_AVAILABLE:\n            return None\n            \n        card = QFrame()\n        card.setFrameStyle(QFrame.Shape.Box)\n        card.setStyleSheet(f\"\"\"\n            QFrame {{\n                border: 2px solid {prediction['color']};\n                border-radius: 8px;\n                padding: 10px;\n                margin: 5px;\n                background-color: white;\n            }}\n        \"\"\")\n        \n        layout = QVBoxLayout(card)\n        \n        # 標題行\n        title_layout = QHBoxLayout()\n        \n        name_label = QLabel(prediction['name'])\n        name_label.setFont(QFont(\"Arial\", 12, QFont.Weight.Bold))\n        title_layout.addWidget(name_label)\n        \n        title_layout.addStretch()\n        \n        # 預測結果\n        pred_label = QLabel(prediction['prediction'])\n        pred_label.setFont(QFont(\"Arial\", 12, QFont.Weight.Bold))\n        pred_label.setStyleSheet(f\"color: {prediction['color']};\")\n        title_layout.addWidget(pred_label)\n        \n        layout.addLayout(title_layout)\n        \n        # 信心度進度條\n        confidence_layout = QHBoxLayout()\n        confidence_layout.addWidget(QLabel(\"信心度:\"))\n        \n        confidence_bar = QProgressBar()\n        confidence_bar.setRange(0, 100)\n        confidence_bar.setValue(int(prediction['confidence']))\n        confidence_bar.setStyleSheet(f\"\"\"\n            QProgressBar::chunk {{\n                background-color: {prediction['color']};\n            }}\n        \"\"\")\n        confidence_layout.addWidget(confidence_bar)\n        \n        confidence_layout.addWidget(QLabel(f\"{prediction['confidence']:.1f}%\"))\n        layout.addLayout(confidence_layout)\n        \n        # 推理說明\n        reasoning_label = QLabel(prediction['reasoning'])\n        reasoning_label.setWordWrap(True)\n        reasoning_label.setStyleSheet(\"color: #666; font-size: 10px;\")\n        layout.addWidget(reasoning_label)\n        \n        return card\n    \n    def on_pair_changed(self, pair: str):\n        \"\"\"交易對改變事件\"\"\"\n        logger.info(f\"切換到交易對: {pair}\")\n        self.update_predictions()\n    \n    def update_predictions(self):\n        \"\"\"更新預測結果\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        try:\n            # 重新創建預測卡片（模擬更新）\n            self.create_prediction_cards()\n            logger.info(\"✅ AI預測結果已更新\")\n            \n        except Exception as e:\n            logger.error(f\"❌ 更新預測結果失敗: {e}\")\n\nclass ModelConfigWidget(QWidget if PYQT_AVAILABLE else object):\n    \"\"\"模型配置組件\"\"\"\n    \n    def __init__(self, parent=None):\n        if PYQT_AVAILABLE:\n            super().__init__(parent)\n        self.setup_ui()\n    \n    def setup_ui(self):\n        \"\"\"設置UI\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        layout = QVBoxLayout(self)\n        \n        # 標題\n        title = QLabel(\"⚙️ 模型參數配置\")\n        title.setFont(QFont(\"Arial\", 14, QFont.Weight.Bold))\n        layout.addWidget(title)\n        \n        # 配置表單\n        form_layout = QFormLayout()\n        \n        # 模型選擇\n        self.model_combo = QComboBox()\n        self.model_combo.addItems([\n            \"市場掃描員 (llama2:7b)\",\n            \"深度分析師 (falcon:7b)\", \n            \"趨勢分析師 (qwen:7b)\",\n            \"風險評估AI (mistral:7b)\",\n            \"最終決策者 (qwen:7b)\"\n        ])\n        form_layout.addRow(\"選擇模型:\", self.model_combo)\n        \n        # 溫度參數\n        self.temperature_slider = QSlider(Qt.Orientation.Horizontal)\n        self.temperature_slider.setRange(1, 100)\n        self.temperature_slider.setValue(25)\n        self.temperature_label = QLabel(\"0.25\")\n        \n        temp_layout = QHBoxLayout()\n        temp_layout.addWidget(self.temperature_slider)\n        temp_layout.addWidget(self.temperature_label)\n        \n        self.temperature_slider.valueChanged.connect(\n            lambda v: self.temperature_label.setText(f\"{v/100:.2f}\")\n        )\n        \n        form_layout.addRow(\"溫度參數:\", temp_layout)\n        \n        # 最大令牌數\n        self.max_tokens_spin = QSpinBox()\n        self.max_tokens_spin.setRange(100, 1000)\n        self.max_tokens_spin.setValue(400)\n        form_layout.addRow(\"最大令牌數:\", self.max_tokens_spin)\n        \n        # 權重\n        self.weight_slider = QSlider(Qt.Orientation.Horizontal)\n        self.weight_slider.setRange(1, 50)\n        self.weight_slider.setValue(25)\n        self.weight_label = QLabel(\"0.25\")\n        \n        weight_layout = QHBoxLayout()\n        weight_layout.addWidget(self.weight_slider)\n        weight_layout.addWidget(self.weight_label)\n        \n        self.weight_slider.valueChanged.connect(\n            lambda v: self.weight_label.setText(f\"{v/100:.2f}\")\n        )\n        \n        form_layout.addRow(\"決策權重:\", weight_layout)\n        \n        # 啟用/禁用\n        self.enabled_checkbox = QCheckBox(\"啟用此模型\")\n        self.enabled_checkbox.setChecked(True)\n        form_layout.addRow(\"狀態:\", self.enabled_checkbox)\n        \n        layout.addLayout(form_layout)\n        \n        # 控制按鈕\n        button_layout = QHBoxLayout()\n        \n        self.apply_btn = QPushButton(\"✅ 應用配置\")\n        self.apply_btn.clicked.connect(self.apply_configuration)\n        button_layout.addWidget(self.apply_btn)\n        \n        self.reset_btn = QPushButton(\"🔄 重置默認\")\n        self.reset_btn.clicked.connect(self.reset_configuration)\n        button_layout.addWidget(self.reset_btn)\n        \n        button_layout.addStretch()\n        layout.addLayout(button_layout)\n        \n        layout.addStretch()\n    \n    def apply_configuration(self):\n        \"\"\"應用配置\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        try:\n            config = {\n                \"model\": self.model_combo.currentText(),\n                \"temperature\": self.temperature_slider.value() / 100,\n                \"max_tokens\": self.max_tokens_spin.value(),\n                \"weight\": self.weight_slider.value() / 100,\n                \"enabled\": self.enabled_checkbox.isChecked()\n            }\n            \n            logger.info(f\"應用模型配置: {config}\")\n            QMessageBox.information(self, \"成功\", \"配置已應用\")\n            \n        except Exception as e:\n            logger.error(f\"❌ 應用配置失敗: {e}\")\n            QMessageBox.warning(self, \"錯誤\", f\"應用配置失敗: {e}\")\n    \n    def reset_configuration(self):\n        \"\"\"重置配置\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        self.temperature_slider.setValue(25)\n        self.max_tokens_spin.setValue(400)\n        self.weight_slider.setValue(25)\n        self.enabled_checkbox.setChecked(True)\n        \n        QMessageBox.information(self, \"成功\", \"配置已重置為默認值\")\n\nclass ModernAITradingGUI(QMainWindow if PYQT_AVAILABLE else object):\n    \"\"\"現代化AI交易系統GUI主窗口\"\"\"\n    \n    def __init__(self):\n        if PYQT_AVAILABLE:\n            super().__init__()\n        \n        self.logger = logging.getLogger(__name__)\n        \n        # 核心組件\n        self.ai_manager = None\n        self.max_client = None\n        self.risk_manager = None\n        \n        # GUI組件\n        self.ai_status_widget = None\n        self.prediction_widget = None\n        self.config_widget = None\n        \n        # 初始化\n        self.setup_ui()\n        self.initialize_components()\n        \n        self.logger.info(\"🚀 現代化AI交易GUI初始化完成\")\n    \n    def setup_ui(self):\n        \"\"\"設置用戶界面\"\"\"\n        if not PYQT_AVAILABLE:\n            self.logger.info(\"🖥️ GUI運行在文本模式\")\n            return\n            \n        self.setWindowTitle(\"AImax - 現代化AI交易系統\")\n        self.setGeometry(100, 100, 1600, 1000)\n        \n        # 應用現代化樣式\n        self.apply_modern_style()\n        \n        # 創建中央組件\n        central_widget = QWidget()\n        self.setCentralWidget(central_widget)\n        \n        # 主佈局\n        main_layout = QHBoxLayout(central_widget)\n        \n        # 創建分割器\n        splitter = QSplitter(Qt.Orientation.Horizontal)\n        \n        # 左側面板 - AI狀態和配置\n        left_panel = QWidget()\n        left_layout = QVBoxLayout(left_panel)\n        \n        # AI模型狀態\n        self.ai_status_widget = AIModelStatusWidget()\n        left_layout.addWidget(self.ai_status_widget)\n        \n        # 模型配置\n        self.config_widget = ModelConfigWidget()\n        left_layout.addWidget(self.config_widget)\n        \n        splitter.addWidget(left_panel)\n        \n        # 右側面板 - 預測結果\n        right_panel = QWidget()\n        right_layout = QVBoxLayout(right_panel)\n        \n        # AI預測結果\n        self.prediction_widget = AIPredictionWidget()\n        right_layout.addWidget(self.prediction_widget)\n        \n        splitter.addWidget(right_panel)\n        \n        # 設置分割比例\n        splitter.setSizes([600, 1000])\n        \n        main_layout.addWidget(splitter)\n        \n        # 創建狀態欄\n        self.create_status_bar()\n    \n    def create_status_bar(self):\n        \"\"\"創建狀態欄\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        status_bar = self.statusBar()\n        \n        # 系統狀態\n        self.system_status_label = QLabel(\"🟡 系統初始化中...\")\n        status_bar.addWidget(self.system_status_label)\n        \n        # AI模型計數\n        self.ai_count_label = QLabel(\"AI模型: 0/5\")\n        status_bar.addPermanentWidget(self.ai_count_label)\n        \n        # 時間顯示\n        self.time_label = QLabel()\n        status_bar.addPermanentWidget(self.time_label)\n        \n        # 定時更新時間\n        self.time_timer = QTimer()\n        self.time_timer.timeout.connect(self.update_time_display)\n        self.time_timer.start(1000)\n    \n    def initialize_components(self):\n        \"\"\"初始化組件\"\"\"\n        try:\n            self.logger.info(\"🔄 初始化AImax組件...\")\n            \n            if AIMAX_MODULES_AVAILABLE:\n                # 初始化AI管理器\n                self.ai_manager = EnhancedAIManager()\n                self.logger.info(\"✅ AI管理器初始化完成\")\n                \n                # 初始化MAX客戶端\n                self.max_client = create_max_client()\n                self.logger.info(\"✅ MAX客戶端初始化完成\")\n                \n                # 初始化風險管理器\n                self.risk_manager = create_risk_manager()\n                self.logger.info(\"✅ 風險管理器初始化完成\")\n                \n                # 設置AI管理器到狀態組件\n                if self.ai_status_widget:\n                    self.ai_status_widget.set_ai_manager(self.ai_manager)\n                \n                if PYQT_AVAILABLE:\n                    self.system_status_label.setText(\"🟢 系統運行正常\")\n                    self.ai_count_label.setText(\"AI模型: 5/5\")\n                \n            else:\n                self.logger.warning(\"⚠️ 使用模擬模式\")\n                if PYQT_AVAILABLE:\n                    self.system_status_label.setText(\"🟡 模擬模式\")\n                    self.ai_count_label.setText(\"AI模型: 模擬\")\n            \n            self.logger.info(\"✅ 所有組件初始化完成\")\n            \n        except Exception as e:\n            self.logger.error(f\"❌ 組件初始化失敗: {e}\")\n            if PYQT_AVAILABLE:\n                self.system_status_label.setText(\"🔴 初始化失敗\")\n                QMessageBox.critical(self, \"初始化錯誤\", f\"組件初始化失敗: {e}\")\n    \n    def update_time_display(self):\n        \"\"\"更新時間顯示\"\"\"\n        if PYQT_AVAILABLE:\n            current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            self.time_label.setText(current_time)\n    \n    def apply_modern_style(self):\n        \"\"\"應用現代化樣式\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        style = \"\"\"\n        QMainWindow {\n            background-color: #f8f9fa;\n        }\n        \n        QWidget {\n            font-family: 'Segoe UI', Arial, sans-serif;\n        }\n        \n        QGroupBox {\n            font-weight: bold;\n            border: 2px solid #dee2e6;\n            border-radius: 8px;\n            margin-top: 10px;\n            padding-top: 10px;\n        }\n        \n        QGroupBox::title {\n            subcontrol-origin: margin;\n            left: 10px;\n            padding: 0 5px 0 5px;\n        }\n        \n        QPushButton {\n            background-color: #007bff;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 6px;\n            font-weight: bold;\n            min-width: 100px;\n        }\n        \n        QPushButton:hover {\n            background-color: #0056b3;\n        }\n        \n        QPushButton:pressed {\n            background-color: #004085;\n        }\n        \n        QTableWidget {\n            gridline-color: #dee2e6;\n            background-color: white;\n            alternate-background-color: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 4px;\n        }\n        \n        QTableWidget::item {\n            padding: 8px;\n        }\n        \n        QHeaderView::section {\n            background-color: #e9ecef;\n            padding: 8px;\n            border: none;\n            font-weight: bold;\n        }\n        \n        QComboBox {\n            border: 1px solid #ced4da;\n            border-radius: 4px;\n            padding: 6px;\n            background-color: white;\n        }\n        \n        QComboBox:hover {\n            border-color: #80bdff;\n        }\n        \n        QProgressBar {\n            border: 1px solid #dee2e6;\n            border-radius: 4px;\n            text-align: center;\n        }\n        \n        QProgressBar::chunk {\n            background-color: #28a745;\n            border-radius: 3px;\n        }\n        \n        QSlider::groove:horizontal {\n            border: 1px solid #dee2e6;\n            height: 6px;\n            background: #f8f9fa;\n            border-radius: 3px;\n        }\n        \n        QSlider::handle:horizontal {\n            background: #007bff;\n            border: 1px solid #0056b3;\n            width: 18px;\n            margin: -6px 0;\n            border-radius: 9px;\n        }\n        \n        QStatusBar {\n            background-color: #e9ecef;\n            border-top: 1px solid #dee2e6;\n        }\n        \n        QScrollArea {\n            border: 1px solid #dee2e6;\n            border-radius: 4px;\n            background-color: white;\n        }\n        \"\"\"\n        \n        self.setStyleSheet(style)\n    \n    def closeEvent(self, event):\n        \"\"\"關閉事件\"\"\"\n        try:\n            self.logger.info(\"🔄 正在關閉應用程序...\")\n            \n            # 停止定時器\n            if hasattr(self, 'time_timer'):\n                self.time_timer.stop()\n            \n            # 清理資源\n            if self.ai_manager:\n                # 這裡可以添加AI管理器的清理代碼\n                pass\n            \n            self.logger.info(\"✅ 應用程序正常關閉\")\n            \n        except Exception as e:\n            self.logger.error(f\"❌ 關閉應用程序時發生錯誤: {e}\")\n        \n        event.accept()\n\ndef main():\n    \"\"\"主函數\"\"\"\n    # 設置日誌\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('AImax/logs/modern_gui.log', encoding='utf-8'),\n            logging.StreamHandler()\n        ]\n    )\n    \n    logger = logging.getLogger(__name__)\n    logger.info(\"🚀 啟動現代化AI交易GUI\")\n    \n    if PYQT_AVAILABLE:\n        app = QApplication(sys.argv)\n        app.setApplicationName(\"AImax Modern GUI\")\n        app.setApplicationVersion(\"2.0.0\")\n        \n        # 創建主窗口\n        main_window = ModernAITradingGUI()\n        main_window.show()\n        \n        # 運行應用程序\n        sys.exit(app.exec())\n    else:\n        # 文本模式\n        logger.info(\"🖥️ 運行在文本模式\")\n        main_window = ModernAITradingGUI()\n        \n        try:\n            while True:\n                time.sleep(1)\n        except KeyboardInterrupt:\n            logger.info(\"⏹️ 用戶中斷，正在關閉...\")\n\nif __name__ == \"__main__\":\n    main()\n"