#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n升級版GUI系統 - 整合AI模型管理器\n\"\"\"\n\nimport sys\nimport os\nimport logging\nimport time\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Any\nfrom pathlib import Path\n\n# 添加項目根目錄到路徑\nsys.path.append(str(Path(__file__).parent.parent.parent))\n\ntry:\n    from PyQt6.QtWidgets import (\n        QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,\n        QTabWidget, QLabel, QPushButton, QTextEdit, QComboBox,\n        QTableWidget, QTableWidgetItem, QHeaderView, QSplitter,\n        QMessageBox, QProgressBar\n    )\n    from PyQt6.QtCore import QTimer, Qt\n    from PyQt6.QtGui import QFont, QColor\n    PYQT_AVAILABLE = True\nexcept ImportError:\n    PYQT_AVAILABLE = False\n    print(\"⚠️ PyQt6 未安裝，GUI將使用文本模式\")\n\n# 導入AImax核心組件\ntry:\n    from src.ai.enhanced_ai_manager import EnhancedAIManager\n    AIMAX_MODULES_AVAILABLE = True\nexcept ImportError:\n    AIMAX_MODULES_AVAILABLE = False\n    print(\"⚠️ AImax模塊未完全可用，將使用模擬模式\")\n\nlogger = logging.getLogger(__name__)\n\nclass AIModelStatusWidget(QWidget if PYQT_AVAILABLE else object):\n    \"\"\"AI模型狀態顯示組件\"\"\"\n    \n    def __init__(self, parent=None):\n        if PYQT_AVAILABLE:\n            super().__init__(parent)\n        self.ai_manager = None\n        self.setup_ui()\n        \n        # 定時更新\n        if PYQT_AVAILABLE:\n            self.update_timer = QTimer()\n            self.update_timer.timeout.connect(self.update_model_status)\n            self.update_timer.start(5000)  # 每5秒更新\n    \n    def setup_ui(self):\n        \"\"\"設置UI\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        layout = QVBoxLayout(self)\n        \n        # 標題\n        title = QLabel(\"🧠 AI模型狀態監控\")\n        title.setFont(QFont(\"Arial\", 14, QFont.Weight.Bold))\n        layout.addWidget(title)\n        \n        # AI模型狀態表格\n        self.model_table = QTableWidget()\n        self.model_table.setColumnCount(4)\n        self.model_table.setHorizontalHeaderLabels([\"AI角色\", \"模型\", \"狀態\", \"信心度\"])\n        \n        # 調整列寬\n        header = self.model_table.horizontalHeader()\n        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)\n        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)\n        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)\n        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)\n        \n        layout.addWidget(self.model_table)\n        \n        # 控制按鈕\n        button_layout = QHBoxLayout()\n        \n        self.refresh_btn = QPushButton(\"🔄 刷新狀態\")\n        self.refresh_btn.clicked.connect(self.update_model_status)\n        button_layout.addWidget(self.refresh_btn)\n        \n        self.test_models_btn = QPushButton(\"🧪 測試模型\")\n        self.test_models_btn.clicked.connect(self.test_all_models)\n        button_layout.addWidget(self.test_models_btn)\n        \n        button_layout.addStretch()\n        layout.addLayout(button_layout)\n        \n        # 初始化表格\n        self.initialize_model_table()\n    \n    def initialize_model_table(self):\n        \"\"\"初始化模型表格\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        # AI模型信息\n        models = [\n            (\"🚀 市場掃描員\", \"llama2:7b\", \"待機\", \"--\"),\n            (\"🔍 深度分析師\", \"falcon:7b\", \"待機\", \"--\"),\n            (\"📈 趨勢分析師\", \"qwen:7b\", \"待機\", \"--\"),\n            (\"⚠️ 風險評估AI\", \"mistral:7b\", \"待機\", \"--\"),\n            (\"🧠 最終決策者\", \"qwen:7b\", \"待機\", \"--\")\n        ]\n        \n        self.model_table.setRowCount(len(models))\n        \n        for row, (role, model, status, confidence) in enumerate(models):\n            self.model_table.setItem(row, 0, QTableWidgetItem(role))\n            self.model_table.setItem(row, 1, QTableWidgetItem(model))\n            \n            # 狀態項目帶顏色\n            status_item = QTableWidgetItem(status)\n            status_item.setBackground(QColor(255, 255, 224))  # 淺黃色\n            self.model_table.setItem(row, 2, status_item)\n            \n            self.model_table.setItem(row, 3, QTableWidgetItem(confidence))\n    \n    def set_ai_manager(self, ai_manager):\n        \"\"\"設置AI管理器\"\"\"\n        self.ai_manager = ai_manager\n        self.update_model_status()\n    \n    def update_model_status(self):\n        \"\"\"更新模型狀態\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        try:\n            # 模擬狀態更新\n            statuses = [\"運行中\", \"運行中\", \"運行中\", \"運行中\", \"運行中\"]\n            confidences = [\"75.2%\", \"82.1%\", \"68.9%\", \"91.5%\", \"77.3%\"]\n            \n            for row in range(self.model_table.rowCount()):\n                # 更新狀態\n                status_item = QTableWidgetItem(statuses[row])\n                status_item.setBackground(QColor(144, 238, 144))  # 淺綠色\n                self.model_table.setItem(row, 2, status_item)\n                \n                # 更新信心度\n                self.model_table.setItem(row, 3, QTableWidgetItem(confidences[row]))\n            \n        except Exception as e:\n            logger.error(f\"❌ 更新模型狀態失敗: {e}\")\n    \n    def test_all_models(self):\n        \"\"\"測試所有AI模型\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        try:\n            QMessageBox.information(self, \"測試結果\", \"✅ 所有AI模型測試通過！\")\n        except Exception as e:\n            logger.error(f\"❌ 測試AI模型失敗: {e}\")\n\nclass AIPredictionWidget(QWidget if PYQT_AVAILABLE else object):\n    \"\"\"AI預測結果顯示組件\"\"\"\n    \n    def __init__(self, parent=None):\n        if PYQT_AVAILABLE:\n            super().__init__(parent)\n        self.setup_ui()\n        \n        # 定時更新預測\n        if PYQT_AVAILABLE:\n            self.prediction_timer = QTimer()\n            self.prediction_timer.timeout.connect(self.update_predictions)\n            self.prediction_timer.start(10000)  # 每10秒更新\n    \n    def setup_ui(self):\n        \"\"\"設置UI\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        layout = QVBoxLayout(self)\n        \n        # 標題\n        title = QLabel(\"🔮 AI預測結果\")\n        title.setFont(QFont(\"Arial\", 14, QFont.Weight.Bold))\n        layout.addWidget(title)\n        \n        # 交易對選擇\n        pair_layout = QHBoxLayout()\n        pair_layout.addWidget(QLabel(\"交易對:\"))\n        \n        self.pair_combo = QComboBox()\n        self.pair_combo.addItems([\"BTCTWD\", \"ETHTWD\", \"LTCTWD\", \"BCHTWD\"])\n        pair_layout.addWidget(self.pair_combo)\n        \n        pair_layout.addStretch()\n        layout.addLayout(pair_layout)\n        \n        # 預測結果顯示\n        self.prediction_text = QTextEdit()\n        self.prediction_text.setReadOnly(True)\n        layout.addWidget(self.prediction_text)\n        \n        # 更新按鈕\n        self.update_btn = QPushButton(\"🔄 更新預測\")\n        self.update_btn.clicked.connect(self.update_predictions)\n        layout.addWidget(self.update_btn)\n        \n        # 初始化預測顯示\n        self.update_predictions()\n    \n    def update_predictions(self):\n        \"\"\"更新預測結果\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        try:\n            current_pair = self.pair_combo.currentText()\n            current_time = datetime.now().strftime(\"%H:%M:%S\")\n            \n            predictions = f\"\"\"🔮 AI預測結果 - {current_pair} ({current_time})\n{'='*50}\n\n🚀 市場掃描員 (llama2:7b):\n   預測: BUY | 信心度: 75.2%\n   理由: 檢測到強烈買入信號，RSI指標顯示超賣\n\n🔍 深度分析師 (falcon:7b):\n   預測: BUY | 信心度: 82.1%\n   理由: 技術分析顯示突破關鍵阻力位，成交量放大\n\n📈 趨勢分析師 (qwen:7b):\n   預測: HOLD | 信心度: 68.9%\n   理由: 短期趨勢不明確，建議等待更清晰信號\n\n⚠️ 風險評估AI (mistral:7b):\n   預測: CAUTION | 信心度: 91.5%\n   理由: 市場波動較大，建議降低倉位或設置嚴格止損\n\n🧠 最終決策者 (qwen:7b):\n   預測: BUY | 信心度: 77.3%\n   理由: 綜合分析後建議小倉位買入，嚴格控制風險\n\n{'='*50}\n📊 綜合建議: 小倉位買入，設置5%止損\n⚠️ 風險等級: 中等\n💰 建議倉位: 20%\"\"\"\n            \n            self.prediction_text.setPlainText(predictions)\n            \n        except Exception as e:\n            logger.error(f\"❌ 更新預測失敗: {e}\")\n\nclass UpgradedAITradingGUI(QMainWindow if PYQT_AVAILABLE else object):\n    \"\"\"升級版AI交易系統GUI主窗口\"\"\"\n    \n    def __init__(self):\n        if PYQT_AVAILABLE:\n            super().__init__()\n        \n        self.logger = logging.getLogger(__name__)\n        \n        # 核心組件\n        self.ai_manager = None\n        \n        # GUI組件\n        self.ai_status_widget = None\n        self.prediction_widget = None\n        \n        # 初始化\n        self.setup_ui()\n        self.initialize_components()\n        \n        self.logger.info(\"🚀 升級版AI交易GUI初始化完成\")\n    \n    def setup_ui(self):\n        \"\"\"設置用戶界面\"\"\"\n        if not PYQT_AVAILABLE:\n            self.logger.info(\"🖥️ GUI運行在文本模式\")\n            return\n            \n        self.setWindowTitle(\"AImax - 升級版AI交易系統\")\n        self.setGeometry(100, 100, 1400, 800)\n        \n        # 應用樣式\n        self.apply_style()\n        \n        # 創建中央組件\n        central_widget = QWidget()\n        self.setCentralWidget(central_widget)\n        \n        # 主佈局\n        main_layout = QHBoxLayout(central_widget)\n        \n        # 創建分割器\n        splitter = QSplitter(Qt.Orientation.Horizontal)\n        \n        # 左側面板 - AI狀態\n        self.ai_status_widget = AIModelStatusWidget()\n        splitter.addWidget(self.ai_status_widget)\n        \n        # 右側面板 - 預測結果\n        self.prediction_widget = AIPredictionWidget()\n        splitter.addWidget(self.prediction_widget)\n        \n        # 設置分割比例\n        splitter.setSizes([600, 800])\n        \n        main_layout.addWidget(splitter)\n        \n        # 創建狀態欄\n        self.create_status_bar()\n    \n    def create_status_bar(self):\n        \"\"\"創建狀態欄\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        status_bar = self.statusBar()\n        \n        # 系統狀態\n        self.system_status_label = QLabel(\"🟡 系統初始化中...\")\n        status_bar.addWidget(self.system_status_label)\n        \n        # AI模型計數\n        self.ai_count_label = QLabel(\"AI模型: 0/5\")\n        status_bar.addPermanentWidget(self.ai_count_label)\n        \n        # 時間顯示\n        self.time_label = QLabel()\n        status_bar.addPermanentWidget(self.time_label)\n        \n        # 定時更新時間\n        self.time_timer = QTimer()\n        self.time_timer.timeout.connect(self.update_time_display)\n        self.time_timer.start(1000)\n    \n    def initialize_components(self):\n        \"\"\"初始化組件\"\"\"\n        try:\n            self.logger.info(\"🔄 初始化AImax組件...\")\n            \n            if AIMAX_MODULES_AVAILABLE:\n                # 初始化AI管理器\n                self.ai_manager = EnhancedAIManager()\n                self.logger.info(\"✅ AI管理器初始化完成\")\n                \n                # 設置AI管理器到狀態組件\n                if self.ai_status_widget:\n                    self.ai_status_widget.set_ai_manager(self.ai_manager)\n                \n                if PYQT_AVAILABLE:\n                    self.system_status_label.setText(\"🟢 系統運行正常\")\n                    self.ai_count_label.setText(\"AI模型: 5/5\")\n                \n            else:\n                self.logger.warning(\"⚠️ 使用模擬模式\")\n                if PYQT_AVAILABLE:\n                    self.system_status_label.setText(\"🟡 模擬模式\")\n                    self.ai_count_label.setText(\"AI模型: 模擬\")\n            \n            self.logger.info(\"✅ 所有組件初始化完成\")\n            \n        except Exception as e:\n            self.logger.error(f\"❌ 組件初始化失敗: {e}\")\n            if PYQT_AVAILABLE:\n                self.system_status_label.setText(\"🔴 初始化失敗\")\n                QMessageBox.critical(self, \"初始化錯誤\", f\"組件初始化失敗: {e}\")\n    \n    def update_time_display(self):\n        \"\"\"更新時間顯示\"\"\"\n        if PYQT_AVAILABLE:\n            current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            self.time_label.setText(current_time)\n    \n    def apply_style(self):\n        \"\"\"應用樣式\"\"\"\n        if not PYQT_AVAILABLE:\n            return\n            \n        style = \"\"\"\n        QMainWindow {\n            background-color: #f8f9fa;\n        }\n        \n        QPushButton {\n            background-color: #007bff;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            font-weight: bold;\n        }\n        \n        QPushButton:hover {\n            background-color: #0056b3;\n        }\n        \n        QTableWidget {\n            gridline-color: #dee2e6;\n            background-color: white;\n            border: 1px solid #dee2e6;\n            border-radius: 4px;\n        }\n        \n        QTableWidget::item {\n            padding: 6px;\n        }\n        \n        QHeaderView::section {\n            background-color: #e9ecef;\n            padding: 6px;\n            border: none;\n            font-weight: bold;\n        }\n        \n        QTextEdit {\n            border: 1px solid #dee2e6;\n            border-radius: 4px;\n            background-color: white;\n            font-family: 'Consolas', monospace;\n        }\n        \n        QComboBox {\n            border: 1px solid #ced4da;\n            border-radius: 4px;\n            padding: 4px;\n            background-color: white;\n        }\n        \n        QStatusBar {\n            background-color: #e9ecef;\n            border-top: 1px solid #dee2e6;\n        }\n        \"\"\"\n        \n        self.setStyleSheet(style)\n    \n    def closeEvent(self, event):\n        \"\"\"關閉事件\"\"\"\n        try:\n            self.logger.info(\"🔄 正在關閉應用程序...\")\n            \n            # 停止定時器\n            if hasattr(self, 'time_timer'):\n                self.time_timer.stop()\n            \n            self.logger.info(\"✅ 應用程序正常關閉\")\n            \n        except Exception as e:\n            self.logger.error(f\"❌ 關閉應用程序時發生錯誤: {e}\")\n        \n        event.accept()\n\ndef main():\n    \"\"\"主函數\"\"\"\n    # 設置日誌\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('AImax/logs/upgraded_gui.log', encoding='utf-8'),\n            logging.StreamHandler()\n        ]\n    )\n    \n    logger = logging.getLogger(__name__)\n    logger.info(\"🚀 啟動升級版AI交易GUI\")\n    \n    if PYQT_AVAILABLE:\n        app = QApplication(sys.argv)\n        app.setApplicationName(\"AImax Upgraded GUI\")\n        app.setApplicationVersion(\"2.0.0\")\n        \n        # 創建主窗口\n        main_window = UpgradedAITradingGUI()\n        main_window.show()\n        \n        # 運行應用程序\n        sys.exit(app.exec())\n    else:\n        # 文本模式\n        logger.info(\"🖥️ 運行在文本模式\")\n        main_window = UpgradedAITradingGUI()\n        \n        try:\n            while True:\n                time.sleep(1)\n        except KeyboardInterrupt:\n            logger.info(\"⏹️ 用戶中斷，正在關閉...\")\n\nif __name__ == \"__main__\":\n    main()\n"