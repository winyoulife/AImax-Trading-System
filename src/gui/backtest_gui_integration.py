#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÂõûÊ∏¨ÂäüËÉΩGUIÊï¥Âêà - Â∞áÂõûÊ∏¨ÂäüËÉΩÊï¥ÂêàÂà∞GUIÁïåÈù¢
"""

import sys
import os
import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path
import numpy as np
import pandas as pd

# Ê∑ªÂä†È†ÖÁõÆÊ†πÁõÆÈåÑÂà∞Ë∑ØÂæë
sys.path.append(str(Path(__file__).parent.parent.parent))

try:
    from PyQt6.QtWidgets import (
        QWidget, QVBoxLayout, QHBoxLayout, QTabWidget, QLabel, 
        QPushButton, QTextEdit, QComboBox, QGroupBox, QGridLayout,
        QProgressBar, QTableWidget, QTableWidgetItem, QHeaderView,
        QScrollArea, QFrame, QSplitter, QTreeWidget, QTreeWidgetItem,
        QSlider, QSpinBox, QCheckBox, QDateEdit, QDoubleSpinBox,
        QMessageBox, QFileDialog, QPlainTextEdit
    )
    from PyQt6.QtCore import QTimer, Qt, pyqtSignal, QThread, QDate
    from PyQt6.QtGui import QFont, QColor, QPalette, QPixmap, QPainter, QPen
    PYQT_AVAILABLE = True
except ImportError:
    PYQT_AVAILABLE = False
    print("‚ö†Ô∏è PyQt6 Êú™ÂÆâË£ùÔºåÂõûÊ∏¨GUIÊï¥ÂêàÂ∞á‰ΩøÁî®ÊñáÊú¨Ê®°Âºè")

# Â∞éÂÖ•AImaxÊ†∏ÂøÉÁµÑ‰ª∂
try:
    from src.core.backtest_reporter import create_backtest_report_generator
    from src.ai.enhanced_ai_manager import EnhancedAIManager
    AIMAX_MODULES_AVAILABLE = True
except ImportError:
    AIMAX_MODULES_AVAILABLE = False
    print("‚ö†Ô∏è AImaxÊ®°Â°äÊú™ÂÆåÂÖ®ÂèØÁî®ÔºåÂ∞á‰ΩøÁî®Ê®°Êì¨Ê®°Âºè")

logger = logging.getLogger(__name__)

class BacktestConfigWidget(QWidget if PYQT_AVAILABLE else object):
    """ÂõûÊ∏¨ÈÖçÁΩÆÁµÑ‰ª∂"""
    
    def __init__(self, parent=None):
        if PYQT_AVAILABLE:
            super().__init__(parent)
        self.setup_ui()
        
    def setup_ui(self):
        """Ë®≠ÁΩÆUI"""
        if not PYQT_AVAILABLE:
            return
            
        layout = QVBoxLayout(self)
        
        # Ê®ôÈ°å
        title = QLabel("‚öôÔ∏è ÂõûÊ∏¨ÈÖçÁΩÆ")
        title.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        layout.addWidget(title)
        
        # ÈÖçÁΩÆË°®ÂñÆ
        config_group = QGroupBox("Âü∫Êú¨ÈÖçÁΩÆ")
        config_layout = QGridLayout(config_group)
        
        # ÈñãÂßãÊó•Êúü
        config_layout.addWidget(QLabel("ÈñãÂßãÊó•Êúü:"), 0, 0)
        self.start_date_edit = QDateEdit()
        self.start_date_edit.setDate(QDate.currentDate().addDays(-30))
        self.start_date_edit.setCalendarPopup(True)
        config_layout.addWidget(self.start_date_edit, 0, 1)
        
        # ÁµêÊùüÊó•Êúü
        config_layout.addWidget(QLabel("ÁµêÊùüÊó•Êúü:"), 1, 0)
        self.end_date_edit = QDateEdit()
        self.end_date_edit.setDate(QDate.currentDate())
        self.end_date_edit.setCalendarPopup(True)
        config_layout.addWidget(self.end_date_edit, 1, 1)
        
        # ÂàùÂßãË≥áÈáë
        config_layout.addWidget(QLabel("ÂàùÂßãË≥áÈáë:"), 2, 0)
        self.initial_capital_spin = QDoubleSpinBox()
        self.initial_capital_spin.setRange(10000, 10000000)
        self.initial_capital_spin.setValue(1000000)
        self.initial_capital_spin.setSuffix(" TWD")
        config_layout.addWidget(self.initial_capital_spin, 2, 1)
        
        # ÊâãÁ∫åË≤ªÁéá
        config_layout.addWidget(QLabel("ÊâãÁ∫åË≤ªÁéá:"), 3, 0)
        self.commission_spin = QDoubleSpinBox()
        self.commission_spin.setRange(0, 0.01)
        self.commission_spin.setValue(0.001)
        self.commission_spin.setDecimals(4)
        self.commission_spin.setSuffix("%")
        config_layout.addWidget(self.commission_spin, 3, 1)
        
        # ÊªëÈªûÁéá
        config_layout.addWidget(QLabel("ÊªëÈªûÁéá:"), 4, 0)
        self.slippage_spin = QDoubleSpinBox()
        self.slippage_spin.setRange(0, 0.01)
        self.slippage_spin.setValue(0.0005)
        self.slippage_spin.setDecimals(4)
        self.slippage_spin.setSuffix("%")
        config_layout.addWidget(self.slippage_spin, 4, 1)
        
        layout.addWidget(config_group)
        
        # Á≠ñÁï•ÈÖçÁΩÆ
        strategy_group = QGroupBox("Á≠ñÁï•ÈÖçÁΩÆ")
        strategy_layout = QGridLayout(strategy_group)
        
        # ÊúÄÂ§ßÊåÅÂÄâÊï∏
        strategy_layout.addWidget(QLabel("ÊúÄÂ§ßÊåÅÂÄâÊï∏:"), 0, 0)
        self.max_positions_spin = QSpinBox()
        self.max_positions_spin.setRange(1, 20)
        self.max_positions_spin.setValue(5)
        strategy_layout.addWidget(self.max_positions_spin, 0, 1)
        
        # Ê≠¢ÊêçÁôæÂàÜÊØî
        strategy_layout.addWidget(QLabel("Ê≠¢ÊêçÁôæÂàÜÊØî:"), 1, 0)
        self.stop_loss_spin = QDoubleSpinBox()
        self.stop_loss_spin.setRange(0.01, 0.5)
        self.stop_loss_spin.setValue(0.05)
        self.stop_loss_spin.setDecimals(3)
        self.stop_loss_spin.setSuffix("%")
        strategy_layout.addWidget(self.stop_loss_spin, 1, 1)
        
        # Ê≠¢ÁõàÁôæÂàÜÊØî
        strategy_layout.addWidget(QLabel("Ê≠¢ÁõàÁôæÂàÜÊØî:"), 2, 0)
        self.take_profit_spin = QDoubleSpinBox()
        self.take_profit_spin.setRange(0.01, 1.0)
        self.take_profit_spin.setValue(0.1)
        self.take_profit_spin.setDecimals(3)
        self.take_profit_spin.setSuffix("%")
        strategy_layout.addWidget(self.take_profit_spin, 2, 1)
        
        # ÊúÄÂ§ßÊåÅÂÄâÊôÇÈñì
        strategy_layout.addWidget(QLabel("ÊúÄÂ§ßÊåÅÂÄâÊôÇÈñì:"), 3, 0)
        self.max_holding_spin = QSpinBox()
        self.max_holding_spin.setRange(1, 168)
        self.max_holding_spin.setValue(24)
        self.max_holding_spin.setSuffix(" Â∞èÊôÇ")
        strategy_layout.addWidget(self.max_holding_spin, 3, 1)
        
        layout.addWidget(strategy_group)
        
        # AIÊ®°ÂûãÈÅ∏Êìá
        ai_group = QGroupBox("AIÊ®°ÂûãÈÅ∏Êìá")
        ai_layout = QVBoxLayout(ai_group)
        
        # Ê®°ÂûãË§áÈÅ∏Ê°Ü
        self.model_checkboxes = {}
        models = [
            ("ensemble_scorer", "üéØ ÈõÜÊàêË©ïÂàÜÂô®", True),
            ("lstm_predictor", "üìà LSTMÈ†êÊ∏¨Âô®", True),
            ("xgboost_predictor", "üå≥ XGBoostÈ†êÊ∏¨Âô®", False),
            ("ai_enhanced", "üß† AIÂ¢ûÂº∑Ê®°Âºè", True)
        ]
        
        for model_id, model_name, default_checked in models:
            checkbox = QCheckBox(model_name)
            checkbox.setChecked(default_checked)
            self.model_checkboxes[model_id] = checkbox
            ai_layout.addWidget(checkbox)
        
        layout.addWidget(ai_group)
        
        # ÊéßÂà∂ÊåâÈàï
        button_layout = QHBoxLayout()
        
        self.load_config_btn = QPushButton("üìÇ ËºâÂÖ•ÈÖçÁΩÆ")
        self.load_config_btn.clicked.connect(self.load_configuration)
        button_layout.addWidget(self.load_config_btn)
        
        self.save_config_btn = QPushButton("üíæ ‰øùÂ≠òÈÖçÁΩÆ")
        self.save_config_btn.clicked.connect(self.save_configuration)
        button_layout.addWidget(self.save_config_btn)
        
        self.reset_btn = QPushButton("üîÑ ÈáçÁΩÆ")
        self.reset_btn.clicked.connect(self.reset_configuration)
        button_layout.addWidget(self.reset_btn)
        
        button_layout.addStretch()
        layout.addLayout(button_layout)
    
    def get_configuration(self) -> Dict[str, Any]:
        """Áç≤ÂèñÁï∂ÂâçÈÖçÁΩÆ"""
        if not PYQT_AVAILABLE:
            return {}
            
        return {
            "start_date": self.start_date_edit.date().toString("yyyy-MM-dd"),
            "end_date": self.end_date_edit.date().toString("yyyy-MM-dd"),
            "initial_capital": self.initial_capital_spin.value(),
            "commission_rate": self.commission_spin.value() / 100,
            "slippage_rate": self.slippage_spin.value() / 100,
            "max_positions": self.max_positions_spin.value(),
            "stop_loss_pct": self.stop_loss_spin.value() / 100,
            "take_profit_pct": self.take_profit_spin.value() / 100,
            "max_holding_hours": self.max_holding_spin.value(),
            "selected_models": [
                model_id for model_id, checkbox in self.model_checkboxes.items()
                if checkbox.isChecked()
            ]
        }
    
    def set_configuration(self, config: Dict[str, Any]):
        """Ë®≠ÁΩÆÈÖçÁΩÆ"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            if "start_date" in config:
                self.start_date_edit.setDate(QDate.fromString(config["start_date"], "yyyy-MM-dd"))
            if "end_date" in config:
                self.end_date_edit.setDate(QDate.fromString(config["end_date"], "yyyy-MM-dd"))
            if "initial_capital" in config:
                self.initial_capital_spin.setValue(config["initial_capital"])
            if "commission_rate" in config:
                self.commission_spin.setValue(config["commission_rate"] * 100)
            if "slippage_rate" in config:
                self.slippage_spin.setValue(config["slippage_rate"] * 100)
            if "max_positions" in config:
                self.max_positions_spin.setValue(config["max_positions"])
            if "stop_loss_pct" in config:
                self.stop_loss_spin.setValue(config["stop_loss_pct"] * 100)
            if "take_profit_pct" in config:
                self.take_profit_spin.setValue(config["take_profit_pct"] * 100)
            if "max_holding_hours" in config:
                self.max_holding_spin.setValue(config["max_holding_hours"])
            if "selected_models" in config:
                for model_id, checkbox in self.model_checkboxes.items():
                    checkbox.setChecked(model_id in config["selected_models"])
                    
        except Exception as e:
            logger.error(f"‚ùå Ë®≠ÁΩÆÈÖçÁΩÆÂ§±Êïó: {e}")
    
    def load_configuration(self):
        """ËºâÂÖ•ÈÖçÁΩÆÊñá‰ª∂"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            file_path, _ = QFileDialog.getOpenFileName(
                self, "ËºâÂÖ•ÂõûÊ∏¨ÈÖçÁΩÆ", "", "JSON Files (*.json)"
            )
            
            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                self.set_configuration(config)
                QMessageBox.information(self, "ÊàêÂäü", "ÈÖçÁΩÆËºâÂÖ•ÊàêÂäü")
                
        except Exception as e:
            logger.error(f"‚ùå ËºâÂÖ•ÈÖçÁΩÆÂ§±Êïó: {e}")
            QMessageBox.warning(self, "ÈåØË™§", f"ËºâÂÖ•ÈÖçÁΩÆÂ§±Êïó: {e}")
    
    def save_configuration(self):
        """‰øùÂ≠òÈÖçÁΩÆÊñá‰ª∂"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "‰øùÂ≠òÂõûÊ∏¨ÈÖçÁΩÆ", "", "JSON Files (*.json)"
            )
            
            if file_path:
                config = self.get_configuration()
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=2, ensure_ascii=False)
                
                QMessageBox.information(self, "ÊàêÂäü", "ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäü")
                
        except Exception as e:
            logger.error(f"‚ùå ‰øùÂ≠òÈÖçÁΩÆÂ§±Êïó: {e}")
            QMessageBox.warning(self, "ÈåØË™§", f"‰øùÂ≠òÈÖçÁΩÆÂ§±Êïó: {e}")
    
    def reset_configuration(self):
        """ÈáçÁΩÆÈÖçÁΩÆÁÇ∫ÈªòË™çÂÄº"""
        if not PYQT_AVAILABLE:
            return
            
        self.start_date_edit.setDate(QDate.currentDate().addDays(-30))
        self.end_date_edit.setDate(QDate.currentDate())
        self.initial_capital_spin.setValue(1000000)
        self.commission_spin.setValue(0.001)
        self.slippage_spin.setValue(0.0005)
        self.max_positions_spin.setValue(5)
        self.stop_loss_spin.setValue(0.05)
        self.take_profit_spin.setValue(0.1)
        self.max_holding_spin.setValue(24)
        
        # ÈáçÁΩÆÊ®°ÂûãÈÅ∏Êìá
        for model_id, checkbox in self.model_checkboxes.items():
            if model_id in ["ensemble_scorer", "lstm_predictor", "ai_enhanced"]:
                checkbox.setChecked(True)
            else:
                checkbox.setChecked(False)
        
        QMessageBox.information(self, "ÊàêÂäü", "ÈÖçÁΩÆÂ∑≤ÈáçÁΩÆÁÇ∫ÈªòË™çÂÄº")

class BacktestExecutionWidget(QWidget if PYQT_AVAILABLE else object):
    """ÂõûÊ∏¨Âü∑Ë°åÁµÑ‰ª∂"""
    
    backtest_started = pyqtSignal() if PYQT_AVAILABLE else None
    backtest_finished = pyqtSignal(dict) if PYQT_AVAILABLE else None
    
    def __init__(self, parent=None):
        if PYQT_AVAILABLE:
            super().__init__(parent)
        self.setup_ui()
        self.backtest_thread = None
        
    def setup_ui(self):
        """Ë®≠ÁΩÆUI"""
        if not PYQT_AVAILABLE:
            return
            
        layout = QVBoxLayout(self)
        
        # Ê®ôÈ°å
        title = QLabel("üöÄ ÂõûÊ∏¨Âü∑Ë°å")
        title.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        layout.addWidget(title)
        
        # Âü∑Ë°åÊéßÂà∂
        control_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("‚ñ∂Ô∏è ÈñãÂßãÂõûÊ∏¨")
        self.start_btn.clicked.connect(self.start_backtest)
        control_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπÔ∏è ÂÅúÊ≠¢ÂõûÊ∏¨")
        self.stop_btn.clicked.connect(self.stop_backtest)
        self.stop_btn.setEnabled(False)
        control_layout.addWidget(self.stop_btn)
        
        self.clear_btn = QPushButton("üóëÔ∏è Ê∏ÖÁ©∫Êó•Ë™å")
        self.clear_btn.clicked.connect(self.clear_log)
        control_layout.addWidget(self.clear_btn)
        
        control_layout.addStretch()
        layout.addLayout(control_layout)
        
        # ÈÄ≤Â∫¶È°ØÁ§∫
        progress_group = QGroupBox("Âü∑Ë°åÈÄ≤Â∫¶")
        progress_layout = QVBoxLayout(progress_group)
        
        # Á∏ΩÈ´îÈÄ≤Â∫¶
        progress_layout.addWidget(QLabel("Á∏ΩÈ´îÈÄ≤Â∫¶:"))
        self.overall_progress = QProgressBar()
        self.overall_progress.setRange(0, 100)
        progress_layout.addWidget(self.overall_progress)
        
        # Áï∂ÂâçÈöéÊÆµ
        self.current_stage_label = QLabel("Áï∂ÂâçÈöéÊÆµ: Á≠âÂæÖÈñãÂßã")
        progress_layout.addWidget(self.current_stage_label)
        
        # Áµ±Ë®à‰ø°ÊÅØ
        stats_layout = QGridLayout()
        
        stats_layout.addWidget(QLabel("Â∑≤ËôïÁêÜÊï∏Êìö:"), 0, 0)
        self.processed_data_label = QLabel("0 / 0")
        stats_layout.addWidget(self.processed_data_label, 0, 1)
        
        stats_layout.addWidget(QLabel("Âü∑Ë°å‰∫§Êòì:"), 1, 0)
        self.executed_trades_label = QLabel("0")
        stats_layout.addWidget(self.executed_trades_label, 1, 1)
        
        stats_layout.addWidget(QLabel("Áï∂ÂâçÊî∂Áõä:"), 2, 0)
        self.current_return_label = QLabel("0.00%")
        stats_layout.addWidget(self.current_return_label, 2, 1)
        
        stats_layout.addWidget(QLabel("Âü∑Ë°åÊôÇÈñì:"), 3, 0)
        self.execution_time_label = QLabel("00:00:00")
        stats_layout.addWidget(self.execution_time_label, 3, 1)
        
        progress_layout.addLayout(stats_layout)
        layout.addWidget(progress_group)
        
        # Âü∑Ë°åÊó•Ë™å
        log_group = QGroupBox("Âü∑Ë°åÊó•Ë™å")
        log_layout = QVBoxLayout(log_group)
        
        self.log_text = QPlainTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumBlockCount(1000)  # ÈôêÂà∂Êó•Ë™åË°åÊï∏
        log_layout.addWidget(self.log_text)
        
        layout.addWidget(log_group)
        
        # ÂÆöÊôÇÊõ¥Êñ∞Âü∑Ë°åÊôÇÈñì
        self.execution_timer = QTimer()
        self.execution_timer.timeout.connect(self.update_execution_time)
        self.execution_start_time = None
    
    def start_backtest(self, config: Dict[str, Any] = None):
        """ÈñãÂßãÂõûÊ∏¨"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            
            # ÈáçÁΩÆÈÄ≤Â∫¶
            self.overall_progress.setValue(0)
            self.current_stage_label.setText("Áï∂ÂâçÈöéÊÆµ: ÂàùÂßãÂåñ‰∏≠...")
            self.processed_data_label.setText("0 / 0")
            self.executed_trades_label.setText("0")
            self.current_return_label.setText("0.00%")
            
            # ÈñãÂßãË®àÊôÇ
            self.execution_start_time = datetime.now()
            self.execution_timer.start(1000)
            
            # Ê∑ªÂä†ÈñãÂßãÊó•Ë™å
            self.add_log("üöÄ ÈñãÂßãÂõûÊ∏¨Âü∑Ë°å...")
            self.add_log(f"üìÖ ÈÖçÁΩÆ: {json.dumps(config or {}, indent=2, ensure_ascii=False)}")
            
            # ÁôºÈÄÅÈñãÂßã‰ø°Ëôü
            if self.backtest_started:
                self.backtest_started.emit()
            
            # Ê®°Êì¨ÂõûÊ∏¨Âü∑Ë°å
            self.simulate_backtest_execution(config or {})
            
        except Exception as e:
            logger.error(f"‚ùå ÈñãÂßãÂõûÊ∏¨Â§±Êïó: {e}")
            self.add_log(f"‚ùå ÈñãÂßãÂõûÊ∏¨Â§±Êïó: {e}")
            self.reset_execution_state()
    
    def stop_backtest(self):
        """ÂÅúÊ≠¢ÂõûÊ∏¨"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            self.add_log("‚èπÔ∏è Áî®Êà∂Ë´ãÊ±ÇÂÅúÊ≠¢ÂõûÊ∏¨...")
            
            if self.backtest_thread:
                # ÈÄôË£°ÂèØ‰ª•Ê∑ªÂä†Á∑öÁ®ãÂÅúÊ≠¢ÈÇèËºØ
                pass
            
            self.reset_execution_state()
            self.add_log("‚úÖ ÂõûÊ∏¨Â∑≤ÂÅúÊ≠¢")
            
        except Exception as e:
            logger.error(f"‚ùå ÂÅúÊ≠¢ÂõûÊ∏¨Â§±Êïó: {e}")
            self.add_log(f"‚ùå ÂÅúÊ≠¢ÂõûÊ∏¨Â§±Êïó: {e}")
    
    def simulate_backtest_execution(self, config: Dict[str, Any]):
        """Ê®°Êì¨ÂõûÊ∏¨Âü∑Ë°åÈÅéÁ®ã"""
        if not PYQT_AVAILABLE:
            return
            
        # ‰ΩøÁî®QTimerÊ®°Êì¨Áï∞Ê≠•Âü∑Ë°å
        self.simulation_step = 0
        self.simulation_timer = QTimer()
        self.simulation_timer.timeout.connect(lambda: self.execute_simulation_step(config))
        self.simulation_timer.start(500)  # ÊØè500msÂü∑Ë°å‰∏ÄÊ≠•
    
    def execute_simulation_step(self, config: Dict[str, Any]):
        """Âü∑Ë°åÊ®°Êì¨Ê≠•È©ü"""
        if not PYQT_AVAILABLE:
            return
            
        self.simulation_step += 1
        
        if self.simulation_step <= 20:  # Ê®°Êì¨20ÂÄãÊ≠•È©ü
            # Êõ¥Êñ∞ÈÄ≤Â∫¶
            progress = int((self.simulation_step / 20) * 100)
            self.overall_progress.setValue(progress)
            
            # Êõ¥Êñ∞ÈöéÊÆµ‰ø°ÊÅØ
            if self.simulation_step <= 5:
                self.current_stage_label.setText("Áï∂ÂâçÈöéÊÆµ: Êï∏ÊìöÊ∫ñÂÇô‰∏≠...")
                self.add_log(f"üìä Ê∫ñÂÇôÊ≠∑Âè≤Êï∏Êìö... ({self.simulation_step}/5)")
            elif self.simulation_step <= 10:
                self.current_stage_label.setText("Áï∂ÂâçÈöéÊÆµ: AIÊ®°ÂûãÈ†êÊ∏¨‰∏≠...")
                self.add_log(f"üß† AIÊ®°ÂûãÂàÜÊûê‰∏≠... ({self.simulation_step-5}/5)")
            elif self.simulation_step <= 15:
                self.current_stage_label.setText("Áï∂ÂâçÈöéÊÆµ: ‰∫§ÊòìÂü∑Ë°å‰∏≠...")
                self.add_log(f"üí∞ Âü∑Ë°å‰∫§ÊòìÊ±∫Á≠ñ... ({self.simulation_step-10}/5)")
                # Êõ¥Êñ∞‰∫§ÊòìÁµ±Ë®à
                self.executed_trades_label.setText(str(self.simulation_step - 10))
            else:
                self.current_stage_label.setText("Áï∂ÂâçÈöéÊÆµ: ÁµêÊûúÂàÜÊûê‰∏≠...")
                self.add_log(f"üìà ÂàÜÊûêÂõûÊ∏¨ÁµêÊûú... ({self.simulation_step-15}/5)")
            
            # Êõ¥Êñ∞Áµ±Ë®à‰ø°ÊÅØ
            self.processed_data_label.setText(f"{self.simulation_step * 50} / 1000")
            
            # Ê®°Êì¨Êî∂ÁõäËÆäÂåñ
            import random
            current_return = random.uniform(-5, 15)
            self.current_return_label.setText(f"{current_return:.2f}%")
            
        else:
            # ÂÆåÊàêÊ®°Êì¨
            self.simulation_timer.stop()
            self.complete_backtest_simulation()
    
    def complete_backtest_simulation(self):
        """ÂÆåÊàêÂõûÊ∏¨Ê®°Êì¨"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            self.overall_progress.setValue(100)
            self.current_stage_label.setText("Áï∂ÂâçÈöéÊÆµ: ÂÆåÊàê")
            self.add_log("‚úÖ ÂõûÊ∏¨Âü∑Ë°åÂÆåÊàêÔºÅ")
            
            # ÁîüÊàêÊ®°Êì¨ÁµêÊûú
            mock_result = {
                "total_return": 12.5,
                "sharpe_ratio": 1.8,
                "max_drawdown": -8.2,
                "win_rate": 0.65,
                "total_trades": 15,
                "execution_time": (datetime.now() - self.execution_start_time).total_seconds()
            }
            
            self.add_log(f"üìä ÂõûÊ∏¨ÁµêÊûú: Á∏ΩÊî∂Áõä {mock_result['total_return']:.2f}%")
            self.add_log(f"üìä Â§èÊôÆÊØîÁéá: {mock_result['sharpe_ratio']:.2f}")
            self.add_log(f"üìä ÊúÄÂ§ßÂõûÊí§: {mock_result['max_drawdown']:.2f}%")
            self.add_log(f"üìä ÂãùÁéá: {mock_result['win_rate']:.1%}")
            
            # ÁôºÈÄÅÂÆåÊàê‰ø°Ëôü
            if self.backtest_finished:
                self.backtest_finished.emit(mock_result)
            
            self.reset_execution_state()
            
        except Exception as e:
            logger.error(f"‚ùå ÂÆåÊàêÂõûÊ∏¨Ê®°Êì¨Â§±Êïó: {e}")
            self.add_log(f"‚ùå ÂÆåÊàêÂõûÊ∏¨Ê®°Êì¨Â§±Êïó: {e}")
    
    def reset_execution_state(self):
        """ÈáçÁΩÆÂü∑Ë°åÁãÄÊÖã"""
        if not PYQT_AVAILABLE:
            return
            
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.execution_timer.stop()
        
        if hasattr(self, 'simulation_timer'):
            self.simulation_timer.stop()
    
    def update_execution_time(self):
        """Êõ¥Êñ∞Âü∑Ë°åÊôÇÈñì"""
        if not PYQT_AVAILABLE or not self.execution_start_time:
            return
            
        elapsed = datetime.now() - self.execution_start_time
        hours, remainder = divmod(int(elapsed.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        self.execution_time_label.setText(f"{hours:02d}:{minutes:02d}:{seconds:02d}")
    
    def add_log(self, message: str):
        """Ê∑ªÂä†Êó•Ë™å"""
        if not PYQT_AVAILABLE:
            return
            
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.appendPlainText(f"[{timestamp}] {message}")
    
    def clear_log(self):
        """Ê∏ÖÁ©∫Êó•Ë™å"""
        if PYQT_AVAILABLE:
            self.log_text.clear()

class BacktestResultsWidget(QWidget if PYQT_AVAILABLE else object):
    """ÂõûÊ∏¨ÁµêÊûúÈ°ØÁ§∫ÁµÑ‰ª∂"""
    
    def __init__(self, parent=None):
        if PYQT_AVAILABLE:
            super().__init__(parent)
        self.setup_ui()
        self.current_results = None
        
    def setup_ui(self):
        """Ë®≠ÁΩÆUI"""
        if not PYQT_AVAILABLE:
            return
            
        layout = QVBoxLayout(self)
        
        # Ê®ôÈ°å
        title = QLabel("üìä ÂõûÊ∏¨ÁµêÊûú")
        title.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        layout.addWidget(title)
        
        # ÁµêÊûúÈÅ∏È†ÖÂç°
        self.results_tabs = QTabWidget()
        
        # ÊÄßËÉΩÊåáÊ®ôÈÅ∏È†ÖÂç°
        self.create_performance_tab()
        
        # ‰∫§ÊòìË®òÈåÑÈÅ∏È†ÖÂç°
        self.create_trades_tab()
        
        # ÂúñË°®ÂàÜÊûêÈÅ∏È†ÖÂç°
        self.create_charts_tab()
        
        layout.addWidget(self.results_tabs)
        
        # ÊéßÂà∂ÊåâÈàï
        button_layout = QHBoxLayout()
        
        self.export_btn = QPushButton("üì§ Â∞éÂá∫ÁµêÊûú")
        self.export_btn.clicked.connect(self.export_results)
        self.export_btn.setEnabled(False)
        button_layout.addWidget(self.export_btn)
        
        self.compare_btn = QPushButton("üîç ÊØîËºÉÂàÜÊûê")
        self.compare_btn.clicked.connect(self.compare_results)
        self.compare_btn.setEnabled(False)
        button_layout.addWidget(self.compare_btn)
        
        self.clear_btn = QPushButton("üóëÔ∏è Ê∏ÖÁ©∫ÁµêÊûú")
        self.clear_btn.clicked.connect(self.clear_results)
        button_layout.addWidget(self.clear_btn)
        
        button_layout.addStretch()
        layout.addLayout(button_layout)
    
    def create_performance_tab(self):
        """ÂâµÂª∫ÊÄßËÉΩÊåáÊ®ôÈÅ∏È†ÖÂç°"""
        if not PYQT_AVAILABLE:
            return
            
        performance_widget = QWidget()
        layout = QVBoxLayout(performance_widget)
        
        # ÈóúÈçµÊåáÊ®ô
        key_metrics_group = QGroupBox("ÈóúÈçµÊÄßËÉΩÊåáÊ®ô")
        key_metrics_layout = QGridLayout(key_metrics_group)
        
        # ÂâµÂª∫ÊåáÊ®ôÊ®ôÁ±§
        self.metrics_labels = {}
        metrics = [
            ("total_return", "Á∏ΩÊî∂ÁõäÁéá", "0.00%"),
            ("annualized_return", "Âπ¥ÂåñÊî∂ÁõäÁéá", "0.00%"),
            ("sharpe_ratio", "Â§èÊôÆÊØîÁéá", "0.00"),
            ("max_drawdown", "ÊúÄÂ§ßÂõûÊí§", "0.00%"),
            ("win_rate", "ÂãùÁéá", "0.00%"),
            ("profit_factor", "ÁõàÂà©Âõ†Â≠ê", "0.00"),
            ("total_trades", "Á∏Ω‰∫§ÊòìÊï∏", "0"),
            ("avg_trade_duration", "Âπ≥ÂùáÊåÅÂÄâÊôÇÈñì", "0.00Â∞èÊôÇ")
        ]
        
        for i, (key, label, default) in enumerate(metrics):
            row, col = divmod(i, 2)
            key_metrics_layout.addWidget(QLabel(f"{label}:"), row, col*2)
            
            value_label = QLabel(default)
            value_label.setFont(QFont("Arial", 10, QFont.Weight.Bold))
            value_label.setStyleSheet("color: #2196F3;")
            self.metrics_labels[key] = value_label
            key_metrics_layout.addWidget(value_label, row, col*2+1)
        
        layout.addWidget(key_metrics_group)
        
        # È¢®Èö™ÊåáÊ®ô
        risk_metrics_group = QGroupBox("È¢®Èö™ÂàÜÊûêÊåáÊ®ô")
        risk_metrics_layout = QGridLayout(risk_metrics_group)
        
        risk_metrics = [
            ("volatility", "Ê≥¢ÂãïÁéá", "0.00%"),
            ("sortino_ratio", "Á¥¢ÊèêË´æÊØîÁéá", "0.00"),
            ("calmar_ratio", "Âç°Áë™ÊØîÁéá", "0.00"),
            ("recovery_factor", "ÊÅ¢Âæ©Âõ†Â≠ê", "0.00")
        ]
        
        for i, (key, label, default) in enumerate(risk_metrics):
            row, col = divmod(i, 2)
            risk_metrics_layout.addWidget(QLabel(f"{label}:"), row, col*2)
            
            value_label = QLabel(default)
            value_label.setFont(QFont("Arial", 10, QFont.Weight.Bold))
            value_label.setStyleSheet("color: #FF9800;")
            self.metrics_labels[key] = value_label
            risk_metrics_layout.addWidget(value_label, row, col*2+1)
        
        layout.addWidget(risk_metrics_group)
        
        # Ê∑ªÂä†Âà∞ÈÅ∏È†ÖÂç°
        self.results_tabs.addTab(performance_widget, "üìà ÊÄßËÉΩÊåáÊ®ô")
    
    def create_trades_tab(self):
        """ÂâµÂª∫‰∫§ÊòìË®òÈåÑÈÅ∏È†ÖÂç°"""
        if not PYQT_AVAILABLE:
            return
            
        trades_widget = QWidget()
        layout = QVBoxLayout(trades_widget)
        
        # ‰∫§ÊòìÁµ±Ë®à
        stats_group = QGroupBox("‰∫§ÊòìÁµ±Ë®à")
        stats_layout = QGridLayout(stats_group)
        
        self.trade_stats_labels = {}
        trade_stats = [
            ("total_trades", "Á∏Ω‰∫§ÊòìÊï∏", "0"),
            ("winning_trades", "ÁõàÂà©‰∫§Êòì", "0"),
            ("losing_trades", "ËôßÊêç‰∫§Êòì", "0"),
            ("avg_win", "Âπ≥ÂùáÁõàÂà©", "0.00%"),
            ("avg_loss", "Âπ≥ÂùáËôßÊêç", "0.00%"),
            ("max_win", "ÊúÄÂ§ßÁõàÂà©", "0.00%"),
            ("max_loss", "ÊúÄÂ§ßËôßÊêç", "0.00%"),
            ("consecutive_wins", "ÊúÄÂ§ßÈÄ£Âãù", "0")
        ]
        
        for i, (key, label, default) in enumerate(trade_stats):
            row, col = divmod(i, 2)
            stats_layout.addWidget(QLabel(f"{label}:"), row, col*2)
            
            value_label = QLabel(default)
            value_label.setFont(QFont("Arial", 10, QFont.Weight.Bold))
            self.trade_stats_labels[key] = value_label
            stats_layout.addWidget(value_label, row, col*2+1)
        
        layout.addWidget(stats_group)
        
        # ‰∫§ÊòìË®òÈåÑË°®Ê†º
        trades_group = QGroupBox("Ë©≥Á¥∞‰∫§ÊòìË®òÈåÑ")
        trades_layout = QVBoxLayout(trades_group)
        
        self.trades_table = QTableWidget()
        self.trades_table.setColumnCount(8)
        self.trades_table.setHorizontalHeaderLabels([
            "ÈÄ≤Â†¥ÊôÇÈñì", "Âá∫Â†¥ÊôÇÈñì", "È°ûÂûã", "ÈÄ≤Â†¥ÂÉπ", "Âá∫Â†¥ÂÉπ", "Êï∏Èáè", "ÁõàËôß", "ÁõàËôß%"
        ])
        
        # Ë™øÊï¥ÂàóÂØ¨
        header = self.trades_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
        
        trades_layout.addWidget(self.trades_table)
        layout.addWidget(trades_group)
        
        # Ê∑ªÂä†Âà∞ÈÅ∏È†ÖÂç°
        self.results_tabs.addTab(trades_widget, "üí∞ ‰∫§ÊòìË®òÈåÑ")
    
    def create_charts_tab(self):
        """ÂâµÂª∫ÂúñË°®ÂàÜÊûêÈÅ∏È†ÖÂç°"""
        if not PYQT_AVAILABLE:
            return
            
        charts_widget = QWidget()
        layout = QVBoxLayout(charts_widget)
        
        # ÂúñË°®ÈÅ∏Êìá
        chart_control_layout = QHBoxLayout()
        
        chart_control_layout.addWidget(QLabel("ÂúñË°®È°ûÂûã:"))
        
        self.chart_type_combo = QComboBox()
        self.chart_type_combo.addItems([
            "Ê¨äÁõäÊõ≤Á∑ö", "ÂõûÊí§Âúñ", "ÊúàÂ∫¶Êî∂Áõä", "‰∫§ÊòìÂàÜ‰Ωà", "È¢®Èö™Êî∂ÁõäÊï£ÈªûÂúñ"
        ])
        self.chart_type_combo.currentTextChanged.connect(self.update_chart_display)
        chart_control_layout.addWidget(self.chart_type_combo)
        
        chart_control_layout.addStretch()
        
        self.refresh_chart_btn = QPushButton("üîÑ Âà∑Êñ∞ÂúñË°®")
        self.refresh_chart_btn.clicked.connect(self.refresh_charts)
        chart_control_layout.addWidget(self.refresh_chart_btn)
        
        layout.addLayout(chart_control_layout)
        
        # ÂúñË°®È°ØÁ§∫ÂçÄÂüü
        self.chart_display = QLabel("üìä ÂúñË°®Â∞áÂú®ÂõûÊ∏¨ÂÆåÊàêÂæåÈ°ØÁ§∫")
        self.chart_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.chart_display.setStyleSheet("""
            QLabel {
                border: 2px dashed #ccc;
                border-radius: 8px;
                padding: 20px;
                background-color: #f9f9f9;
                color: #666;
                font-size: 14px;
            }
        """)
        self.chart_display.setMinimumHeight(400)
        
        layout.addWidget(self.chart_display)
        
        # Ê∑ªÂä†Âà∞ÈÅ∏È†ÖÂç°
        self.results_tabs.addTab(charts_widget, "üìä ÂúñË°®ÂàÜÊûê")
    
    def update_results(self, results: Dict[str, Any]):
        """Êõ¥Êñ∞ÂõûÊ∏¨ÁµêÊûú"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            self.current_results = results
            
            # Êõ¥Êñ∞ÊÄßËÉΩÊåáÊ®ô
            self.update_performance_metrics(results)
            
            # Êõ¥Êñ∞‰∫§ÊòìË®òÈåÑ
            self.update_trade_records(results)
            
            # Êõ¥Êñ∞ÂúñË°®
            self.update_chart_display()
            
            # ÂïüÁî®ÊåâÈàï
            self.export_btn.setEnabled(True)
            self.compare_btn.setEnabled(True)
            
            logger.info("‚úÖ ÂõûÊ∏¨ÁµêÊûúÂ∑≤Êõ¥Êñ∞")
            
        except Exception as e:
            logger.error(f"‚ùå Êõ¥Êñ∞ÂõûÊ∏¨ÁµêÊûúÂ§±Êïó: {e}")
    
    def update_performance_metrics(self, results: Dict[str, Any]):
        """Êõ¥Êñ∞ÊÄßËÉΩÊåáÊ®ô"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            # Êõ¥Êñ∞ÈóúÈçµÊåáÊ®ô
            if "total_return" in results:
                self.metrics_labels["total_return"].setText(f"{results['total_return']:.2f}%")
            if "sharpe_ratio" in results:
                self.metrics_labels["sharpe_ratio"].setText(f"{results['sharpe_ratio']:.2f}")
            if "max_drawdown" in results:
                self.metrics_labels["max_drawdown"].setText(f"{results['max_drawdown']:.2f}%")
            if "win_rate" in results:
                self.metrics_labels["win_rate"].setText(f"{results['win_rate']:.1%}")
            if "total_trades" in results:
                self.metrics_labels["total_trades"].setText(str(results['total_trades']))
            
            # Ë®≠ÁΩÆÈ°èËâ≤
            total_return = results.get('total_return', 0)
            color = "#4CAF50" if total_return > 0 else "#F44336"
            self.metrics_labels["total_return"].setStyleSheet(f"color: {color}; font-weight: bold;")
            
        except Exception as e:
            logger.error(f"‚ùå Êõ¥Êñ∞ÊÄßËÉΩÊåáÊ®ôÂ§±Êïó: {e}")
    
    def update_trade_records(self, results: Dict[str, Any]):
        """Êõ¥Êñ∞‰∫§ÊòìË®òÈåÑ"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            # Êõ¥Êñ∞‰∫§ÊòìÁµ±Ë®à
            self.trade_stats_labels["total_trades"].setText(str(results.get('total_trades', 0)))
            
            # Ê®°Êì¨‰∫§ÊòìË®òÈåÑ
            self.trades_table.setRowCount(5)  # È°ØÁ§∫5Á≠ÜÊ®°Êì¨‰∫§Êòì
            
            mock_trades = [
                ("2024-01-15 09:30", "2024-01-15 15:45", "Ë≤∑ÂÖ•", "45,200", "46,800", "0.1", "+1,600", "+3.54%"),
                ("2024-01-16 10:15", "2024-01-16 14:20", "Ë≤∑ÂÖ•", "46,500", "45,900", "0.1", "-600", "-1.29%"),
                ("2024-01-17 11:00", "2024-01-17 16:30", "Ë≤∑ÂÖ•", "45,800", "47,200", "0.1", "+1,400", "+3.06%"),
                ("2024-01-18 09:45", "2024-01-18 13:15", "Ë≤∑ÂÖ•", "47,100", "46,300", "0.1", "-800", "-1.70%"),
                ("2024-01-19 10:30", "2024-01-19 15:00", "Ë≤∑ÂÖ•", "46,200", "48,500", "0.1", "+2,300", "+4.98%")
            ]
            
            for row, trade_data in enumerate(mock_trades):
                for col, value in enumerate(trade_data):
                    item = QTableWidgetItem(str(value))
                    
                    # Ë®≠ÁΩÆÁõàËôßÈ°èËâ≤
                    if col == 7:  # ÁõàËôß%Âàó
                        if value.startswith('+'):
                            item.setBackground(QColor(144, 238, 144))
                        elif value.startswith('-'):
                            item.setBackground(QColor(255, 182, 193))
                    
                    self.trades_table.setItem(row, col, item)
            
        except Exception as e:
            logger.error(f"‚ùå Êõ¥Êñ∞‰∫§ÊòìË®òÈåÑÂ§±Êïó: {e}")
    
    def update_chart_display(self):
        """Êõ¥Êñ∞ÂúñË°®È°ØÁ§∫"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            chart_type = self.chart_type_combo.currentText()
            
            if self.current_results:
                self.chart_display.setText(f"üìä {chart_type}ÂúñË°®\n\n(ÂØ¶ÈöõÊáâÁî®‰∏≠ÈÄôË£°ÊúÉÈ°ØÁ§∫ÁúüÂØ¶ÁöÑÂúñË°®)")
                self.chart_display.setStyleSheet("""
                    QLabel {
                        border: 2px solid #4CAF50;
                        border-radius: 8px;
                        padding: 20px;
                        background-color: #f0f8f0;
                        color: #2E7D32;
                        font-size: 14px;
                    }
                """)
            else:
                self.chart_display.setText("üìä ÂúñË°®Â∞áÂú®ÂõûÊ∏¨ÂÆåÊàêÂæåÈ°ØÁ§∫")
                self.chart_display.setStyleSheet("""
                    QLabel {
                        border: 2px dashed #ccc;
                        border-radius: 8px;
                        padding: 20px;
                        background-color: #f9f9f9;
                        color: #666;
                        font-size: 14px;
                    }
                """)
            
        except Exception as e:
            logger.error(f"‚ùå Êõ¥Êñ∞ÂúñË°®È°ØÁ§∫Â§±Êïó: {e}")
    
    def refresh_charts(self):
        """Âà∑Êñ∞ÂúñË°®"""
        if PYQT_AVAILABLE:
            self.update_chart_display()
            QMessageBox.information(self, "ÊàêÂäü", "ÂúñË°®Â∑≤Âà∑Êñ∞")
    
    def export_results(self):
        """Â∞éÂá∫ÁµêÊûú"""
        if not PYQT_AVAILABLE or not self.current_results:
            return
            
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Â∞éÂá∫ÂõûÊ∏¨ÁµêÊûú", "", "JSON Files (*.json);;CSV Files (*.csv)"
            )
            
            if file_path:
                if file_path.endswith('.json'):
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(self.current_results, f, indent=2, ensure_ascii=False)
                else:
                    # CSVÂ∞éÂá∫ÈÇèËºØ
                    pass
                
                QMessageBox.information(self, "ÊàêÂäü", "ÁµêÊûúÂ∞éÂá∫ÊàêÂäü")
                
        except Exception as e:
            logger.error(f"‚ùå Â∞éÂá∫ÁµêÊûúÂ§±Êïó: {e}")
            QMessageBox.warning(self, "ÈåØË™§", f"Â∞éÂá∫ÁµêÊûúÂ§±Êïó: {e}")
    
    def compare_results(self):
        """ÊØîËºÉÂàÜÊûê"""
        if PYQT_AVAILABLE:
            QMessageBox.information(self, "ÂäüËÉΩÈñãÁôº‰∏≠", "ÊØîËºÉÂàÜÊûêÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...")
    
    def clear_results(self):
        """Ê∏ÖÁ©∫ÁµêÊûú"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            self.current_results = None
            
            # ÈáçÁΩÆÊâÄÊúâÊ®ôÁ±§
            for label in self.metrics_labels.values():
                label.setText("0.00")
                label.setStyleSheet("color: #2196F3; font-weight: bold;")
            
            for label in self.trade_stats_labels.values():
                label.setText("0")
            
            # Ê∏ÖÁ©∫Ë°®Ê†º
            self.trades_table.setRowCount(0)
            
            # ÈáçÁΩÆÂúñË°®
            self.chart_display.setText("üìä ÂúñË°®Â∞áÂú®ÂõûÊ∏¨ÂÆåÊàêÂæåÈ°ØÁ§∫")
            self.chart_display.setStyleSheet("""
                QLabel {
                    border: 2px dashed #ccc;
                    border-radius: 8px;
                    padding: 20px;
                    background-color: #f9f9f9;
                    color: #666;
                    font-size: 14px;
                }
            """)
            
            # Á¶ÅÁî®ÊåâÈàï
            self.export_btn.setEnabled(False)
            self.compare_btn.setEnabled(False)
            
            QMessageBox.information(self, "ÊàêÂäü", "ÁµêÊûúÂ∑≤Ê∏ÖÁ©∫")
            
        except Exception as e:
            logger.error(f"‚ùå Ê∏ÖÁ©∫ÁµêÊûúÂ§±Êïó: {e}")
            QMessageBox.warning(self, "ÈåØË™§", f"Ê∏ÖÁ©∫ÁµêÊûúÂ§±Êïó: {e}")

class BacktestGUIIntegration(QWidget if PYQT_AVAILABLE else object):
    """ÂõûÊ∏¨GUIÊï¥Âêà‰∏ªÁµÑ‰ª∂"""
    
    def __init__(self, parent=None):
        if PYQT_AVAILABLE:
            super().__init__(parent)
        
        self.logger = logging.getLogger(__name__)
        self.backtest_reporter = None
        
        # Â≠êÁµÑ‰ª∂
        self.config_widget = None
        self.execution_widget = None
        self.results_widget = None
        
        self.setup_ui()
        self.initialize_components()
        self.logger.info("üéØ ÂõûÊ∏¨GUIÊï¥ÂêàÁµÑ‰ª∂ÂàùÂßãÂåñÂÆåÊàê")
    
    def setup_ui(self):
        """Ë®≠ÁΩÆUI"""
        if not PYQT_AVAILABLE:
            self.logger.info("üñ•Ô∏è ÂõûÊ∏¨GUIÊï¥ÂêàÈÅãË°åÂú®ÊñáÊú¨Ê®°Âºè")
            return
            
        layout = QVBoxLayout(self)
        
        # ‰∏ªÊ®ôÈ°å
        main_title = QLabel("üéØ AI‰∫§ÊòìÁ≥ªÁµ±ÂõûÊ∏¨‰∏≠ÂøÉ")
        main_title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        main_title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(main_title)
        
        # ÂâµÂª∫ÈÅ∏È†ÖÂç°
        self.main_tabs = QTabWidget()
        
        # ÈÖçÁΩÆÈÅ∏È†ÖÂç°
        self.config_widget = BacktestConfigWidget()
        self.main_tabs.addTab(self.config_widget, "‚öôÔ∏è ÈÖçÁΩÆ")
        
        # Âü∑Ë°åÈÅ∏È†ÖÂç°
        self.execution_widget = BacktestExecutionWidget()
        self.main_tabs.addTab(self.execution_widget, "üöÄ Âü∑Ë°å")
        
        # ÁµêÊûúÈÅ∏È†ÖÂç°
        self.results_widget = BacktestResultsWidget()
        self.main_tabs.addTab(self.results_widget, "üìä ÁµêÊûú")
        
        layout.addWidget(self.main_tabs)
        
        # ÂÖ®Â±ÄÊéßÂà∂Èù¢Êùø
        self.create_global_control_panel(layout)
        
        # ÈÄ£Êé•‰ø°Ëôü
        self.connect_signals()
    
    def create_global_control_panel(self, parent_layout):
        """ÂâµÂª∫ÂÖ®Â±ÄÊéßÂà∂Èù¢Êùø"""
        if not PYQT_AVAILABLE:
            return
            
        control_group = QGroupBox("ÂÖ®Â±ÄÊéßÂà∂")
        control_layout = QHBoxLayout(control_group)
        
        # Âø´ÈÄüÈñãÂßãÊåâÈàï
        self.quick_start_btn = QPushButton("‚ö° Âø´ÈÄüÈñãÂßã")
        self.quick_start_btn.clicked.connect(self.quick_start_backtest)
        control_layout.addWidget(self.quick_start_btn)
        
        # Â§öÊ®°ÂûãÊØîËºÉÊåâÈàï
        self.multi_model_btn = QPushButton("üîç Â§öÊ®°ÂûãÊØîËºÉ")
        self.multi_model_btn.clicked.connect(self.start_multi_model_comparison)
        control_layout.addWidget(self.multi_model_btn)
        
        # ÂèÉÊï∏ÂÑ™ÂåñÊåâÈàï
        self.optimize_btn = QPushButton("üéØ ÂèÉÊï∏ÂÑ™Âåñ")
        self.optimize_btn.clicked.connect(self.start_parameter_optimization)
        control_layout.addWidget(self.optimize_btn)
        
        control_layout.addStretch()
        
        # Âπ´Âä©ÊåâÈàï
        self.help_btn = QPushButton("‚ùì Âπ´Âä©")
        self.help_btn.clicked.connect(self.show_help)
        control_layout.addWidget(self.help_btn)
        
        parent_layout.addWidget(control_group)
    
    def connect_signals(self):
        """ÈÄ£Êé•‰ø°Ëôü"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            # ÈÄ£Êé•Âü∑Ë°åÁµÑ‰ª∂ÁöÑ‰ø°Ëôü
            if self.execution_widget and hasattr(self.execution_widget, 'backtest_finished'):
                self.execution_widget.backtest_finished.connect(self.on_backtest_finished)
            
        except Exception as e:
            self.logger.error(f"‚ùå ÈÄ£Êé•‰ø°ËôüÂ§±Êïó: {e}")
    
    def initialize_components(self):
        """ÂàùÂßãÂåñÁµÑ‰ª∂"""
        try:
            if AIMAX_MODULES_AVAILABLE:
                # ÂàùÂßãÂåñÂõûÊ∏¨Â†±ÂëäÁîüÊàêÂô®
                self.backtest_reporter = create_backtest_report_generator()
                self.logger.info("‚úÖ ÂõûÊ∏¨Â†±ÂëäÁîüÊàêÂô®ÂàùÂßãÂåñÂÆåÊàê")
            else:
                self.logger.warning("‚ö†Ô∏è ‰ΩøÁî®Ê®°Êì¨Ê®°Âºè")
            
        except Exception as e:
            self.logger.error(f"‚ùå ÁµÑ‰ª∂ÂàùÂßãÂåñÂ§±Êïó: {e}")
    
    def quick_start_backtest(self):
        """Âø´ÈÄüÈñãÂßãÂõûÊ∏¨"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            # Áç≤ÂèñÁï∂ÂâçÈÖçÁΩÆ
            config = self.config_widget.get_configuration()
            
            # ÂàáÊèõÂà∞Âü∑Ë°åÈÅ∏È†ÖÂç°
            self.main_tabs.setCurrentIndex(1)
            
            # ÈñãÂßãÂõûÊ∏¨
            self.execution_widget.start_backtest(config)
            
            self.logger.info("üöÄ Âø´ÈÄüÈñãÂßãÂõûÊ∏¨")
            
        except Exception as e:
            self.logger.error(f"‚ùå Âø´ÈÄüÈñãÂßãÂõûÊ∏¨Â§±Êïó: {e}")
            if PYQT_AVAILABLE:
                QMessageBox.warning(self, "ÈåØË™§", f"Âø´ÈÄüÈñãÂßãÂõûÊ∏¨Â§±Êïó: {e}")
    
    def start_multi_model_comparison(self):
        """ÈñãÂßãÂ§öÊ®°ÂûãÊØîËºÉ"""
        if PYQT_AVAILABLE:
            QMessageBox.information(self, "ÂäüËÉΩÈñãÁôº‰∏≠", "Â§öÊ®°ÂûãÊØîËºÉÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...")
    
    def start_parameter_optimization(self):
        """ÈñãÂßãÂèÉÊï∏ÂÑ™Âåñ"""
        if PYQT_AVAILABLE:
            QMessageBox.information(self, "ÂäüËÉΩÈñãÁôº‰∏≠", "ÂèÉÊï∏ÂÑ™ÂåñÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...")
    
    def show_help(self):
        """È°ØÁ§∫Âπ´Âä©"""
        if not PYQT_AVAILABLE:
            return
            
        help_text = """
        üéØ AI‰∫§ÊòìÁ≥ªÁµ±ÂõûÊ∏¨‰∏≠ÂøÉ‰ΩøÁî®ÊåáÂçó
        
        üìã Âü∫Êú¨ÊµÅÁ®ã:
        1. Âú®„ÄåÈÖçÁΩÆ„ÄçÈÅ∏È†ÖÂç°‰∏≠Ë®≠ÁΩÆÂõûÊ∏¨ÂèÉÊï∏
        2. Âú®„ÄåÂü∑Ë°å„ÄçÈÅ∏È†ÖÂç°‰∏≠ÈÅãË°åÂõûÊ∏¨
        3. Âú®„ÄåÁµêÊûú„ÄçÈÅ∏È†ÖÂç°‰∏≠Êü•ÁúãÂàÜÊûêÁµêÊûú
        
        ‚öôÔ∏è ÈÖçÁΩÆË™™Êòé:
        ‚Ä¢ Ë®≠ÁΩÆÂõûÊ∏¨ÊôÇÈñìÁØÑÂúçÂíåÂàùÂßãË≥áÈáë
        ‚Ä¢ Ë™øÊï¥ÊâãÁ∫åË≤ªÁéáÂíåÊªëÈªûÁéá
        ‚Ä¢ ÈÅ∏ÊìáË¶Å‰ΩøÁî®ÁöÑAIÊ®°Âûã
        ‚Ä¢ ÈÖçÁΩÆÈ¢®Èö™ÊéßÂà∂ÂèÉÊï∏
        
        üöÄ Âü∑Ë°åÂäüËÉΩ:
        ‚Ä¢ ÂØ¶ÊôÇÁõ£ÊéßÂõûÊ∏¨ÈÄ≤Â∫¶
        ‚Ä¢ Êü•ÁúãÂü∑Ë°åÊó•Ë™åÂíåÁµ±Ë®à‰ø°ÊÅØ
        ‚Ä¢ ÊîØÊåÅ‰∏≠ÈÄîÂÅúÊ≠¢ÂõûÊ∏¨
        
        üìä ÁµêÊûúÂàÜÊûê:
        ‚Ä¢ Êü•ÁúãË©≥Á¥∞ÁöÑÊÄßËÉΩÊåáÊ®ô
        ‚Ä¢ ÂàÜÊûê‰∫§ÊòìË®òÈåÑÂíåÁµ±Ë®à
        ‚Ä¢ Êü•ÁúãÂêÑÁ®ÆÂúñË°®ÂàÜÊûê
        ‚Ä¢ Â∞éÂá∫ÁµêÊûúÊï∏Êìö
        
        üí° Âø´Êç∑ÂäüËÉΩ:
        ‚Ä¢ Âø´ÈÄüÈñãÂßã: ‰ΩøÁî®Áï∂ÂâçÈÖçÁΩÆÁ´ãÂç≥ÈñãÂßãÂõûÊ∏¨
        ‚Ä¢ Â§öÊ®°ÂûãÊØîËºÉ: ÂêåÊôÇÊ∏¨Ë©¶Â§öÂÄãAIÊ®°Âûã
        ‚Ä¢ ÂèÉÊï∏ÂÑ™Âåñ: Ëá™ÂãïÂ∞ãÊâæÊúÄ‰Ω≥ÂèÉÊï∏ÁµÑÂêà
        """
        
        QMessageBox.information(self, "‰ΩøÁî®Âπ´Âä©", help_text)
    
    def on_backtest_finished(self, results: Dict[str, Any]):
        """ÂõûÊ∏¨ÂÆåÊàêËôïÁêÜ"""
        if not PYQT_AVAILABLE:
            return
            
        try:
            # ÂàáÊèõÂà∞ÁµêÊûúÈÅ∏È†ÖÂç°
            self.main_tabs.setCurrentIndex(2)
            
            # Êõ¥Êñ∞ÁµêÊûúÈ°ØÁ§∫
            self.results_widget.update_results(results)
            
            # È°ØÁ§∫ÂÆåÊàêÈÄöÁü•
            QMessageBox.information(self, "ÂõûÊ∏¨ÂÆåÊàê", 
                f"ÂõûÊ∏¨Âü∑Ë°åÂÆåÊàêÔºÅ\n\n"
                f"Á∏ΩÊî∂ÁõäÁéá: {results.get('total_return', 0):.2f}%\n"
                f"Â§èÊôÆÊØîÁéá: {results.get('sharpe_ratio', 0):.2f}\n"
                f"ÊúÄÂ§ßÂõûÊí§: {results.get('max_drawdown', 0):.2f}%"
            )
            
            self.logger.info("‚úÖ ÂõûÊ∏¨ÂÆåÊàêÔºåÁµêÊûúÂ∑≤Êõ¥Êñ∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå ËôïÁêÜÂõûÊ∏¨ÂÆåÊàê‰∫ã‰ª∂Â§±Êïó: {e}")

def create_backtest_gui_integration():
    """ÂâµÂª∫ÂõûÊ∏¨GUIÊï¥ÂêàÁµÑ‰ª∂ÂØ¶‰æã"""
    return BacktestGUIIntegration()

def main():
    """‰∏ªÂáΩÊï∏ - Áî®ÊñºÊ∏¨Ë©¶"""
    import sys
    
    # Ë®≠ÁΩÆÊó•Ë™å
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    logger = logging.getLogger(__name__)
    logger.info("üöÄ ÂïüÂãïÂõûÊ∏¨GUIÊï¥ÂêàÊ∏¨Ë©¶")
    
    if PYQT_AVAILABLE:
        from PyQt6.QtWidgets import QApplication, QMainWindow
        
        app = QApplication(sys.argv)
        app.setApplicationName("Backtest GUI Integration Test")
        
        # ÂâµÂª∫‰∏ªÁ™óÂè£
        main_window = QMainWindow()
        main_window.setWindowTitle("ÂõûÊ∏¨GUIÊï¥ÂêàÊ∏¨Ë©¶")
        main_window.setGeometry(100, 100, 1400, 900)
        
        # ÂâµÂª∫ÂõûÊ∏¨GUIÊï¥ÂêàÁµÑ‰ª∂
        backtest_gui = BacktestGUIIntegration()
        main_window.setCentralWidget(backtest_gui)
        
        main_window.show()
        
        # ÈÅãË°åÊáâÁî®Á®ãÂ∫è
        sys.exit(app.exec())
    else:
        # ÊñáÊú¨Ê®°Âºè
        logger.info("üñ•Ô∏è ÈÅãË°åÂú®ÊñáÊú¨Ê®°Âºè")
        backtest_gui = BacktestGUIIntegration()
        
        try:
            input("ÊåâEnterÈçµÈÄÄÂá∫...")
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Áî®Êà∂‰∏≠Êñ∑ÔºåÊ≠£Âú®ÈóúÈñâ...")

if __name__ == "__main__":
    main()