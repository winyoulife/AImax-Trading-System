name: AImax 智能交易系統 - 模擬交易

on:
  schedule:
    # 每5分鐘執行一次 (GitHub Actions免費額度)
    - cron: '*/5 * * * *'
  workflow_dispatch:
    # 手動觸發
    inputs:
      trading_mode:
        description: '交易模式'
        required: true
        default: 'simulation'
        type: choice
        options:
        - simulation
        - backtest
      strategy:
        description: '交易策略'
        required: true
        default: 'ultimate_optimized'
        type: choice
        options:
        - ultimate_optimized
        - smart_balanced
        - ultra_advanced

env:
  TRADING_MODE: simulation  # 模擬交易模式
  PYTHON_VERSION: '3.10'
  
jobs:
  trading-simulation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 🔄 檢出代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: 🐍 設置Python環境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 配置交易環境
      run: |
        echo "🔧 配置模擬交易環境..."
        mkdir -p logs data/simulation
        echo "SIMULATION_MODE=true" >> $GITHUB_ENV
        echo "STRATEGY=ultimate_optimized" >> $GITHUB_ENV
        echo "MAX_DAILY_TRADES=10" >> $GITHUB_ENV
        echo "POSITION_SIZE=0.001" >> $GITHUB_ENV
        
    - name: 📊 獲取市場數據
      run: |
        echo "📊 獲取BTC實時價格數據..."
        python -c "
        import sys
        sys.path.append('.')
        from src.data.data_fetcher import DataFetcher
        
        try:
            fetcher = DataFetcher()
            price = fetcher.get_current_price('BTCUSDT')
            print(f'✅ BTC當前價格: \${price:,.2f}')
            
            # 獲取歷史數據用於技術分析
            df = fetcher.get_historical_data('BTCUSDT', '1h', 100)
            print(f'✅ 獲取歷史數據: {len(df)} 條記錄')
            
            # 保存數據供後續使用
            df.to_csv('data/simulation/btc_data.csv', index=False)
            
        except Exception as e:
            print(f'❌ 數據獲取失敗: {e}')
            exit(1)
        "
        
    - name: 🤖 執行終極優化交易策略
      run: |
        echo "🤖 執行85%勝率終極優化策略..."
        python scripts/github_actions_trader.py
        
    - name: 📈 更新交易狀態
      run: |
        echo "📈 更新系統狀態..."
        python -c "
        import json
        import os
        from datetime import datetime
        
        # 讀取最新交易記錄
        trades = []
        if os.path.exists('data/simulation/trades.jsonl'):
            with open('data/simulation/trades.jsonl', 'r') as f:
                trades = [json.loads(line) for line in f]
        
        # 計算統計數據
        total_trades = len(trades)
        recent_trades = [t for t in trades if t.get('timestamp', '').startswith(datetime.now().strftime('%Y-%m-%d'))]
        daily_trades = len(recent_trades)
        
        # 創建狀態報告
        status = {
            'timestamp': datetime.now().isoformat(),
            'system_status': 'running',
            'trading_mode': 'simulation',
            'strategy': 'ultimate_optimized_90%_winrate',
            'total_trades': total_trades,
            'daily_trades': daily_trades,
            'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
            'github_actions': True
        }
        
        # 保存狀態
        with open('data/simulation/status.json', 'w') as f:
            json.dump(status, f, indent=2)
            
        print('✅ 系統狀態已更新')
        print(f'📊 總交易次數: {total_trades}')
        print(f'📅 今日交易: {daily_trades}')
        "
        
    - name: 📤 提交交易數據
      run: |
        echo "📤 提交模擬交易數據到倉庫..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加交易數據文件
        git add data/simulation/ || true
        
        # 檢查是否有變更
        if git diff --staged --quiet; then
          echo "📝 無新的交易數據需要提交"
        else
          git commit -m "🤖 自動更新模擬交易數據 - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "✅ 交易數據已提交到倉庫"
        fi
        
    - name: 📊 生成交易報告
      run: |
        echo "📊 生成交易性能報告..."
        python -c "
        import json
        import os
        from datetime import datetime, timedelta
        
        if not os.path.exists('data/simulation/trades.jsonl'):
            print('📝 暫無交易數據')
            exit(0)
            
        # 讀取交易記錄
        trades = []
        with open('data/simulation/trades.jsonl', 'r') as f:
            trades = [json.loads(line) for line in f]
            
        if not trades:
            print('📝 暫無交易記錄')
            exit(0)
            
        print('📈 === AImax 模擬交易報告 ===')
        print(f'🕐 報告時間: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S UTC\")}')
        print(f'🎯 使用策略: 終極優化MACD (目標勝率85%+)')
        print(f'📊 總交易次數: {len(trades)}')
        
        # 最近24小時交易
        now = datetime.now()
        recent_trades = []
        for trade in trades:
            try:
                trade_time = datetime.fromisoformat(trade['timestamp'].replace('Z', '+00:00'))
                if (now - trade_time.replace(tzinfo=None)).total_seconds() < 86400:
                    recent_trades.append(trade)
            except:
                continue
                
        print(f'📅 24小時內交易: {len(recent_trades)}')
        
        if recent_trades:
            buy_signals = len([t for t in recent_trades if t['action'] == 'buy'])
            sell_signals = len([t for t in recent_trades if t['action'] == 'sell'])
            avg_confidence = sum(t.get('confidence', 0) for t in recent_trades) / len(recent_trades)
            
            print(f'📈 買入信號: {buy_signals}')
            print(f'📉 賣出信號: {sell_signals}')
            print(f'🎯 平均信號強度: {avg_confidence:.2%}')
            
        print('✅ 模擬交易系統運行正常')
        print('🔄 下次執行: 5分鐘後')
        "
        
    - name: 🚨 錯誤處理
      if: failure()
      run: |
        echo "🚨 交易系統執行失敗"
        echo "📝 錯誤時間: $(date)"
        echo "🔧 系統將在下次定時執行時自動重試"
        
        # 記錄錯誤
        mkdir -p logs
        echo "$(date): GitHub Actions執行失敗" >> logs/error.log
        
        # 嘗試提交錯誤日誌
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add logs/ || true
        git commit -m "🚨 記錄系統錯誤 - $(date '+%Y-%m-%d %H:%M:%S')" || true
        git push || true