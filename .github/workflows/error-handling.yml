name: 🛠️ AImax 錯誤處理和故障恢復

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/error_handling/**'
      - 'scripts/test_error_handling.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/error_handling/**'
  schedule:
    # 每6小時運行一次錯誤處理測試
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: '選擇測試類型'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - error_handler
        - network
        - rate_limiter
        - transaction
        - system_recovery

jobs:
  error-handling-tests:
    name: 🧪 錯誤處理測試
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil requests
    
    - name: 🛠️ 運行錯誤處理測試
      run: |
        python scripts/test_error_handling.py
      continue-on-error: true
    
    - name: 📊 上傳測試報告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: error-handling-test-reports
        path: reports/
        retention-days: 30

  network-resilience-test:
    name: 🌐 網路韌性測試
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'network' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests psutil
    
    - name: 🌐 測試網路連接處理
      run: |
        python -c "
import sys
sys.path.append('.')
from src.error_handling.network_handler import network_handler, check_connectivity
import time

print('🔍 測試網路連接...')
connectivity = check_connectivity()
print(f'網路狀態: {\"✅ 正常\" if connectivity else \"❌ 異常\"}')

print('\\n📊 測試多個端點...')
test_urls = [
    'https://api.github.com',
    'https://httpbin.org/status/200',
    'https://www.google.com'
]

for url in test_urls:
    result = network_handler.test_specific_endpoint(url)
    status = '✅ 成功' if result['success'] else '❌ 失敗'
    print(f'{url}: {status} ({result.get(\"response_time\", 0):.3f}s)')

print('\\n📈 網路統計:')
stats = network_handler.get_connection_stats()
print(f'總請求: {stats[\"total_requests\"]}')
print(f'成功率: {stats[\"success_rate\"]:.1f}%')
"
    
    - name: 🔄 測試重試機制
      run: |
        python -c "
import sys
sys.path.append('.')
from src.error_handling.error_handler import with_retry
import random
import time

@with_retry(max_retries=3, base_delay=1.0)
def flaky_network_call():
    if random.random() < 0.7:  # 70% 成功率
        return 'Network call successful'
    else:
        raise Exception('Network timeout')

print('🔄 測試網路重試機制...')
for i in range(5):
    try:
        result = flaky_network_call()
        print(f'嘗試 {i+1}: ✅ {result}')
    except Exception as e:
        print(f'嘗試 {i+1}: ❌ {e}')
    time.sleep(1)
"

  rate-limiting-test:
    name: ⏱️ 頻率限制測試
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'rate_limiter' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ⏱️ 測試API頻率限制
      run: |
        python -c "
import sys
sys.path.append('.')
from src.error_handling.rate_limiter import rate_limiter, rate_limited
import time

# 設置測試API限制
rate_limiter.set_rate_limit('github_api_test', {
    'requests_per_minute': 3,
    'requests_per_hour': 100
})

@rate_limited('github_api_test')
def mock_github_api_call(call_id):
    print(f'📞 GitHub API 調用 {call_id}')
    return f'API Response {call_id}'

print('⏱️ 測試GitHub API頻率限制...')
for i in range(6):
    try:
        result = mock_github_api_call(i+1)
        print(f'  ✅ {result}')
    except Exception as e:
        print(f'  ❌ 調用 {i+1} 被限制: {e}')
    
    time.sleep(2)

# 顯示使用統計
usage = rate_limiter.get_api_stats('github_api_test')
print(f'\\n📊 API使用統計:')
print(f'當前使用: {usage[\"current_usage\"]}')
print(f'使用率: {usage[\"usage_percentage\"]}')
"

  transaction-rollback-test:
    name: 🔄 交易回滾測試
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'transaction' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔄 測試交易回滾機制
      run: |
        python -c "
import sys
sys.path.append('.')
from src.error_handling.transaction_rollback import transaction_manager
import time

print('🔄 測試交易回滾機制...')

# 創建測試交易
transaction_id = transaction_manager.create_transaction(
    'github_actions_test', 'GitHub Actions 交易回滾測試'
)

# 添加交易步驟
transaction_manager.add_step(
    transaction_id, '模擬買入', 'simulate_buy',
    {'symbol': 'BTCUSDT', 'amount': 100},
    'buy_order'
)

transaction_manager.add_step(
    transaction_id, '更新餘額', 'update_balance',
    {'old_balance': 1000, 'new_balance': 900},
    'balance_update'
)

# 執行交易
result = transaction_manager.execute_transaction(transaction_id)
print(f'交易執行結果: {result}')

# 獲取交易狀態
status = transaction_manager.get_transaction_status(transaction_id)
print(f'交易狀態: {status[\"status\"]}')

# 顯示統計
stats = transaction_manager.get_statistics()
print(f'\\n📊 交易統計:')
print(f'總交易: {stats[\"total_transactions\"]}')
print(f'成功率: {stats[\"success_rate\"]:.1f}%')
print(f'回滾率: {stats[\"rollback_rate\"]:.1f}%')
"

  system-recovery-test:
    name: 🔧 系統恢復測試
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'system_recovery' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil
    
    - name: 🔧 測試系統健康檢查
      run: |
        python -c "
import sys
sys.path.append('.')
from src.error_handling.system_recovery import system_recovery_manager
import time

print('🔧 運行系統健康檢查...')

# 運行健康檢查
health_results = system_recovery_manager.run_health_checks()

print('\\n📊 健康檢查結果:')
for check_name, result in health_results.items():
    status = result.get('status', 'unknown')
    value = result.get('value', 0)
    status_str = status.value if hasattr(status, 'value') else str(status)
    print(f'  {check_name}: {status_str} ({value})')

# 獲取系統狀態
system_status = system_recovery_manager.get_system_status()
print(f'\\n🏥 系統整體健康: {system_status[\"overall_health\"]}')
print(f'健康檢查數量: {system_status[\"health_checks_count\"]}')
print(f'恢復計劃數量: {system_status[\"recovery_plans_count\"]}')
"
    
    - name: 🔍 測試短期監控
      run: |
        python -c "
import sys
sys.path.append('.')
from src.error_handling.system_recovery import system_recovery_manager
import time

print('🔍 啟動短期系統監控測試...')

# 啟動監控
system_recovery_manager.start_monitoring()

# 運行30秒
print('監控運行中...')
time.sleep(30)

# 停止監控
system_recovery_manager.stop_monitoring()

# 獲取最終狀態
final_status = system_recovery_manager.get_system_status()
print(f'\\n✅ 監控測試完成')
print(f'最終健康狀態: {final_status[\"overall_health\"]}')
print(f'連續失敗次數: {final_status[\"consecutive_failures\"]}')
"

  integration-test:
    name: 🎯 集成測試
    runs-on: ubuntu-latest
    needs: [error-handling-tests, network-resilience-test, rate-limiting-test, transaction-rollback-test, system-recovery-test]
    if: always()
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil requests
    
    - name: 🎯 運行集成測試
      run: |
        python -c "
import sys
sys.path.append('.')
from src.error_handling.error_handler import error_handler, with_retry, handle_errors
from src.error_handling.network_handler import safe_request
from src.error_handling.rate_limiter import rate_limited
import time

print('🎯 運行錯誤處理集成測試...')

@handle_errors
@with_retry(max_retries=2)
@rate_limited('integration_test')
def integrated_operation():
    print('執行集成操作...')
    
    # 模擬網路請求
    response = safe_request('https://httpbin.org/status/200')
    if not response:
        raise Exception('網路請求失敗')
    
    return '集成操作成功'

try:
    result = integrated_operation()
    print(f'✅ 集成測試成功: {result}')
except Exception as e:
    print(f'❌ 集成測試失敗: {e}')

# 顯示最終統計
print('\\n📊 最終統計:')
error_stats = error_handler.get_error_statistics()
print(f'錯誤處理統計: {error_stats}')
"
    
    - name: 📊 生成最終報告
      run: |
        echo '## 🛠️ AImax 錯誤處理測試結果' >> $GITHUB_STEP_SUMMARY
        echo '' >> $GITHUB_STEP_SUMMARY
        echo '### ✅ 測試完成項目' >> $GITHUB_STEP_SUMMARY
        echo '- 錯誤處理和重試機制' >> $GITHUB_STEP_SUMMARY
        echo '- 網路連接韌性測試' >> $GITHUB_STEP_SUMMARY
        echo '- API頻率限制控制' >> $GITHUB_STEP_SUMMARY
        echo '- 交易回滾機制' >> $GITHUB_STEP_SUMMARY
        echo '- 系統自動恢復' >> $GITHUB_STEP_SUMMARY
        echo '- 集成測試驗證' >> $GITHUB_STEP_SUMMARY
        echo '' >> $GITHUB_STEP_SUMMARY
        echo '### 📈 測試覆蓋範圍' >> $GITHUB_STEP_SUMMARY
        echo '- 網路連接失敗重試' >> $GITHUB_STEP_SUMMARY
        echo '- API限制和頻率控制' >> $GITHUB_STEP_SUMMARY
        echo '- 交易執行失敗回滾' >> $GITHUB_STEP_SUMMARY
        echo '- 系統異常自動恢復' >> $GITHUB_STEP_SUMMARY
        echo '- 熔斷器保護機制' >> $GITHUB_STEP_SUMMARY
        echo '' >> $GITHUB_STEP_SUMMARY
        echo '🎉 所有錯誤處理機制測試完成！' >> $GITHUB_STEP_SUMMARY
    
    - name: 📊 上傳集成測試報告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: error-handling-integration-reports
        path: reports/
        retention-days: 90